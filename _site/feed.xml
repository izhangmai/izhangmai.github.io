<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zmai掌麦技术团队博客</title>
    <description>记录技术相关的一切。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Sep 2017 16:24:24 +0800</pubDate>
    <lastBuildDate>Mon, 11 Sep 2017 16:24:24 +0800</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>iOS类似设置界面通用库的封装</title>
        <description>&lt;h2 id=&quot;想法和由来&quot;&gt;想法和由来&lt;/h2&gt;
&lt;p&gt;基本每个App都有设置界面,设置一些常见的功能，头像、昵称、个人签名等等。常规的设置界面比如微信设置界面，个人资料界面，复杂的设置界面比如含有IM的群设置界面，知乎App的设置界面。当设置界面设置的功能太多，或者设置界面在App中有太多的地方都需要使用时，对我们开发者来说，就是一件痛苦的事，只是换了数据源而已。通用做法写一个tableView各种判断。其实仔细一想这种类似界面其实跟IM聊天的会话界面类似，消息会话界面一般包含文本​消息、图片消息、语言消息、自定义消息。鉴于之前IM的UI逻辑，于是封装的想法油然而生，封装后大家和自己用起来都很方便了。&lt;/p&gt;
&lt;h2 id=&quot;技术选择&quot;&gt;技术选择&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;a.设计模式 -&amp;gt; MVC&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;b.界面布局 -&amp;gt; 代码AutoLayout,包括适配ipad&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;c.图片下载 -&amp;gt; 依赖SDWebImage&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;​
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;关于设计模式，经典的设计模式比如MVC。其它的设计模式MVVM、MVP、MVCS可以阅读&lt;a href=&quot;http://www.cocoachina.com/ios/20150525/11919.html&quot;&gt;这篇文章&lt;/a&gt;
  因为涉及到的内容没有IM复杂，只是对界面进行简单的逻辑封装和UI处理，所以这里并没有使用其它设计模式所以采用了MVC。对于一个复杂的即时通讯UI的话，应该是多种模式的结合处理会更好，这里推荐一个网易的&lt;a href=&quot;https://github.com/netease-im/NIM_iOS_UIKit&quot;&gt;开源UI组件&lt;/a&gt;参考学习&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于布局，本库关于界面的控件并不是太多。参考环信库，UI也是用NSLayoutConstraint布局。减少依赖，自定义cell你可以使用自带布局或者第三方库布局，由于本库采用了很多继承关系，暂不支持xib/storyBoard。需要代码实现界面布局。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;关于图片下载，做好一个完整的图片下载并不是一件容易的事,既然有成熟第三方库SDWebImage,何不站在巨人肩膀上依赖下呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构图&quot;&gt;架构图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/shaohuihu/HSSettableViewController/Architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容分析&quot;&gt;内容分析&lt;/h2&gt;
&lt;p&gt;由于只是对UI界面的简单封装，本库并不涉及太多很深奥的知识，仅仅只是在细节上有很多处理。下面就几个方面介绍本库的一些小优势。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配置属性完善。满足基本上所有app的类似界面，箭头，分割线，字体大小，颜色，文本位置等等都可以配置。这些属性可以在HSBaseCellModel、HSTitleCellModel、HSImageCellModel、HSSwitchCellModel等类里面找到。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;耦合性特别低。每一种模型对应一种cell，逻辑处理层次明确，从扩展到定位bug都是特别容易，由于有继承关系，每个类处理自己的业务，如果需要自己处理，则需要拦截其业务。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;断言处理。如果由于使用者外部没有按照库的某些规则组装和使用，用断言提醒使用者就比较友好，相关一些代码如下演示：&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       
  &lt;span class=&quot;kt&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs_dataArry&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hs_objectWithIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;NSAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;此对象必须为一个可变数组,请检查数据源组装方式是否正确!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;HSBaseCellModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HSBaseCellModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hs_objectWithIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;NSClassFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;getCellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;以上所示，如果外部传的数组不是可变数组，而是不可变数组，这样就会崩溃该断言！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;个别属性内部保护。如果由于外部胡乱更改一些内部十分重要的属性导致崩溃，那这个库是不完美的。而HSBaseCellModel中的identifier和cellClass分别是模型唯一标识符和寻找cell类名的重要属性，一旦初始化，就不可更改。即使尝试用kvc修改，也应该崩溃。所以它的定义应该是这样：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;///&amp;lt;唯一标识符(更新会用到)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;///&amp;lt;该模型绑定的cell类名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;唯一标识符的设定。每一个模型初始化完成后都应该有一个自己的唯一标识符，因为动态更新视图内部原理就是通过唯一标识符找到模型然后替换，再刷新表格。所以这个唯一标识符是必须唯一，那么怎么才能让这个唯一标识符唯一呢？我最开始是用获取当前时间：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kt&quot;&gt;CFAbsoluteTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFAbsoluteTimeGetCurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;​这样看起来没什么大问题，每个模型都是按照顺序初始化，大多数情况下不会出问题。因为模型就是界面的数据源，这种数据源一般不得超过20条，但是理论上是存在bug的，下面情况我自己测试过，如果我同时并发线程，创建大量的模型，不同线程有时会同一时间创建，即使这个时间已经十分十分细了。但是同一线程肯定肯定有时间差，由此我的唯一标示符由：当前时间+当前线程ID组成。相关代码如下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取当前时间&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;CFAbsoluteTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFAbsoluteTimeGetCurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取当前线程id&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;number = &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastObject&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;privateCellModelIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%lf%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;相关链接&lt;/h2&gt;
&lt;p&gt;​
&lt;a href=&quot;https://github.com/shaohuihu/HSSetTableViewController&quot;&gt;Github源码地址&lt;/a&gt;
做一个东西不难，做好一个东西还是很难，即使看起来很简单的。81个commits和16个release!任然需要不停改善和优化。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 01:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/19/iOS%E7%B1%BB%E4%BC%BC%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E9%80%9A%E7%94%A8%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/19/iOS%E7%B1%BB%E4%BC%BC%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E9%80%9A%E7%94%A8%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>WWDC2017之Core ML</title>
        <description>&lt;h2 id=&quot;什么是core-ml&quot;&gt;什么是Core ML&lt;/h2&gt;

&lt;p&gt;​	Core ML是苹果新推出的，面向开发者的机器学习框架。开发者能够轻松实现实时物体识别、人脸特征点识别、跟踪运动中的物体、文本分析等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2017/coreml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	Core ML 让你将很多机器学习模型集成到你的app中。除了支持层数超过30层的深度学习之外，还支持决策树的融合，SVM（支持向量机），线性模型。由于其底层建立在&lt;em&gt;Metal&lt;/em&gt; 和&lt;em&gt;Accelerate&lt;/em&gt;等技术上，所以可以最大限度的发挥 CPU 和 GPU 的优势。你可以在移动设备上运行机器学习模型，数据可以不离开设备直接被分析，在一定程度上可以为开发者节省购买服务器的成本。而且该框架让所有的机器学习计算都在iOS设备本地进行,这一点依旧体现出苹果对用户隐私很看重。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2017/frame.png&quot; alt=&quot;&quot; title=&quot;Core ML底层框架&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt; &lt;/em&gt;Vision&lt;em&gt;：高性能的图像分析和图像识别。这部分应用于人脸追踪,人脸识别,文本识别,区域识别，二维码识别,物体追踪,图像识别等。
* &lt;/em&gt;Nattural Language processing&lt;em&gt;：自然语言处理。用于语言识别，分词，词性还原，词性判定等。
* &lt;/em&gt;GamePlayKit*：游戏制作,构建游戏。用于常见的游戏行为如随机数生成、人工智能、寻路、和代理行为。&lt;/p&gt;

&lt;h2 id=&quot;如何使用core-ml&quot;&gt;如何使用Core ML&lt;/h2&gt;

&lt;p&gt;​	不得不提的是CoreML使用起来非常方便。苹果很聪明的定义了一个标准的模型格式（.mlmodel），提供了流行的框架模型到该格式的&lt;a href=&quot;https://pypi.python.org/pypi/coremltools&quot;&gt;转换工具&lt;/a&gt;， 比如你可以将你的&lt;a href=&quot;http://caffe.berkeleyvision.org/&quot;&gt;Caffe&lt;/a&gt;模型转换成CoreML的模型格式。这样就可以利用各个模型的训练阶段，而不像TensorflowLite只能使用&lt;em&gt;Tensorflow&lt;/em&gt;模型。模型训练好了之后，只要拖放到Xcode中就可以使用，苹果甚至把接口的Swift代码都给你生成好了，非常方便。&lt;/p&gt;

&lt;h5 id=&quot;step1&quot;&gt;Step1&lt;/h5&gt;

&lt;p&gt;​	准备好你的模型（.mlmodel）,可以按照上面的方法制作你所需的模型，也可以直接在Apple开发者网站上&lt;a href=&quot;https://developer.apple.com/machine-learning/&quot;&gt;下载&lt;/a&gt;现成的模型：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2017/mlmodels.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;step2&quot;&gt;Step2&lt;/h5&gt;

&lt;p&gt;​	新建Project，把格式化的模型文件拖入到项目当中，这里下载的是&lt;em&gt;Places205-GoogLeNet.mlmodel&lt;/em&gt;，然后点击该model，可以看到：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2017/baseinfo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看到 CoreML Model 分成三部分,第一部分算是基本的描述，第二部分 ModelClass 是对应 Model 生成的 Source 点击 &lt;em&gt;GoogLeNetPlaces (Swift generated source)&lt;/em&gt; 末尾的小箭头进入&lt;em&gt;GoogLeNetPlaces.Swift&lt;/em&gt; 文件 可以看到对应 Model的类和方法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GoogLeNetPlacesInput：识别输入参数&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogLeNetPlacesInput&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLFeatureProvider&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GoogLeNetPlacesOutput：输出鉴定结果&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogLeNetPlacesOutput&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MLFeatureProvider&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GoogLeNetPlaces：封装输入输出&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogLeNetPlaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;step3&quot;&gt;Step3&lt;/h5&gt;

&lt;p&gt;使用Xcode自动生成的类及方法&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leNetPlaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogLeNetPlaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;timg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vnCoreModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VNCoreMLModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leNetPlaces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vnCoreMLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VNCoreMLRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vnCoreModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VNRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VNClassificationObservation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Requset Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classification&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confidence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//confidence 识别率,值越高越接近&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//identifier 识别结果&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confidence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vnImageRequestHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VNImageRequestHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cgImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vnImageRequestHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vnCoreMLRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里使用了&lt;a href=&quot;https://developer.apple.com/documentation/vision&quot;&gt;Vision&lt;/a&gt;库中的VNCoreMLModel , VNCoreMLRequest , VNImageRequestHandler。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vison是苹果在WWDC2017上推出的另一个全新框架，其具有高性能的图像分析和计算机视觉能力，应用于图像和视频分类的场景中识别面孔和检测功能。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;下面来看一下识别结果如何：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2017/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一些疑问&quot;&gt;一些疑问&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在模型训练阶段，在尽可能不收集用户数据的前提下，如何优化模型？既使像苹果在去年的 WWDC 上宣称的「我们不需要收集所有用户拍的照片，才知道山长什么样子」，也依然不能回避的事实是，在模型的调优方面，少不了大量的数据支撑。想从 95% 的水平提升到 99% 的水平，数据还是不可缺少的一环。&lt;/li&gt;
  &lt;li&gt;在模型应用阶段，如何做到尽可能在设备本地完成处理？早期受限于设备的性能和功耗，特别是移动设备的电量问题，许多公司选择将数据上传至云端后，由云端服务器来进行运算，只将结果返回给终端设备。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结下来，苹果的目标，就是在尽可能不收集用户数据的基础上，也能调校出足够好用的模型，同时尽可能只在消费者的设备本地运用模型进行计算处理。而对从业者来说，如何利用好这一优秀条件创造出更好的应用也至关重要。&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jun 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/26/WWDC2017%E4%B9%8BCore-ML/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/26/WWDC2017%E4%B9%8BCore-ML/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>WWDC2017学习ARKit体验</title>
        <description>&lt;h1 id=&quot;wwdc2017学习arkit体验&quot;&gt;WWDC2017学习ARKit体验&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;增强现实技术（Augmented Reality，简称 AR），就想Pokeman go的游戏那样，目标就是在屏幕上把虚拟世界整进现实世界中，并进行互动！&lt;/p&gt;

&lt;p&gt;一般AR场景的实现一般有以下：
1、扑捉现实世界呈现在屏幕
2、给现实世界建模
3、传感器追踪
4、坐标识别及转换
5、在建好模的现实世界中呈现虚拟世界的东西(图片、模型等)，或者与之交互&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6271687-1e42f9d04c5deca6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ARKit提供了3D场景、2D场景的增强现实，实际是依赖于使用对应的SceneKit、SpriteKit，之所以使用Apple的游戏引擎是因为需要游戏引擎加载物体模型到现实世界的建模中！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1455032-17c36e569476d9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ARKit需要iOS10以上的操作系统，A9处理器以上的设备(也就是iPhone6、iPad Air2以上的设备)&lt;/p&gt;

&lt;h2 id=&quot;官方demo体验&quot;&gt;官方demo体验&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/sample-code/wwdc/2017/PlacingObjects.zip&quot;&gt;ARKit Demo App: Placing Objects in Augmented Reality&lt;/a&gt; 是官方放出的ARKit的demo，需要使用Xcode9以上的IDE才能玩！&lt;/p&gt;

&lt;p&gt;1、下载Xcode 9(截至文章完成，Xcode 9已经放出了beta2)
自行到 &lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;这里&lt;/a&gt;下载Xcode9&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6230903-5c26d3dd85f2a1db?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iPad上的演示效果&lt;/p&gt;

&lt;h2 id=&quot;arkit原理&quot;&gt;ARKit原理&lt;/h2&gt;

&lt;p&gt;上面说到ARKit需要SceneKit和SpriteKit的支持！所以ARKit的原理可以概括为：
1、相机捕获现实世界，并实时给这个现实世界建模(ARKit实现)
2、在捕获的图像中展示模型(SceneKit和SpriteKit实现)&lt;/p&gt;

&lt;p&gt;对的，原理就这么简单&lt;/p&gt;

&lt;p&gt;下图是ARKit和SceneKit的关系
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6271687-34c56daea7207015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来看看ARKit框架中类
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6271687-67c0307d6f65392c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中最重要的是
ARSCNView
ARSession
ARSessionConfiguration
ARCamera&lt;/p&gt;

&lt;p&gt;所以在代码层面(可以参阅上文中的官方demo)的具体工作流程可以概括为：
0、使用ARSessionConfiguration创建一个ARSession
1、ARSCNView加载SCNScene
2、SCNScene启动ARCamera捕获场景
3、捕获的场景交给ARSession(建立现实世界的模型)
4、给ARSCNView添加各种节点(3D模型)&lt;/p&gt;

&lt;p&gt;如下图
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6271687-5b2cea6f7131d32e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;这篇文章只是对于ARKit初体验的一点点感悟，深入使用的话还涉及到建模、材质渲染等设计方面的知识，游戏开发的各种坐标的转换与计算(难点！)，当然还有就是创意了！&lt;/p&gt;

&lt;p&gt;个人认为！ARKit是苹果开发的一个新方向！可预见的未来一定满大街的APP都有这个功能！iOS开发者必学技能系列！！！&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Jun 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/25/WWDC2017%E5%AD%A6%E4%B9%A0ARKit%E4%BD%93%E9%AA%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/25/WWDC2017%E5%AD%A6%E4%B9%A0ARKit%E4%BD%93%E9%AA%8C/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>iOS库的那些事</title>
        <description>&lt;h1 id=&quot;ios库的那些事&quot;&gt;iOS库的那些事&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;1、减少编译时间&lt;/p&gt;

&lt;p&gt;2、模块封装，项目结构优化&lt;/p&gt;

&lt;p&gt;3、保护源码&lt;/p&gt;

&lt;p&gt;4、提供轮子&lt;/p&gt;

&lt;p&gt;5、……&lt;/p&gt;

&lt;p&gt;所以我们需要学习库的使用和封装的技术！！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS开发中库分两种：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;静态库：以&lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt;为文件后缀名。
动态库：以&lt;code class=&quot;highlighter-rouge&quot;&gt;.tbd&lt;/code&gt;(之前叫&lt;code class=&quot;highlighter-rouge&quot;&gt;.dylib&lt;/code&gt;) 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt; 为文件后缀名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;静态库与动态库的区别&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;静态库：链接时会被完整的复制到可执行文件中，被多次使用就有多份拷贝。
动态库：链接时不复制，程序运行时由系统动态加载到内存，系统只加载一次，多个程序共用（如系统的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit.framework&lt;/code&gt;等），节省内存。&lt;/p&gt;

  &lt;p&gt;但是苹果不让使用自己的动态库，否则审核就无法通过。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;关于编译&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;静态库就是在目标程序编译的时候已经存在了编译好了的二进制代码，所以说目标程序编译的时候不需要对这段代码进行改变，而且还减少了编译时间。
动态库就是在目标程序编译的时候不去链接，而是创建了引用，在运行的时候，进行对动态库的链接和编译。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优缺点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;静态库的好处很明显，编译完成之后，库文件实际上就没有作用了。目标程序没有外部依赖，直接就可以运行。当然其缺点也很明显，就是会使用目标程序的体积增大。&lt;/p&gt;

&lt;p&gt;动态库的优点，不需要拷贝到目标程序中，不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，编译时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码，这样就可以实现动态更新。动态库带来的问题主要是，动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行。&lt;/p&gt;

&lt;h2 id=&quot;使用框架&quot;&gt;使用框架&lt;/h2&gt;

&lt;p&gt;使用包依赖管理工具是最简单粗暴的方式&lt;/p&gt;

&lt;p&gt;如掌麦的iOS项目就是用了&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然还是&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;、&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;由于此文章不是工具使用教程，这里不再赘述上述工具。&lt;/p&gt;

&lt;p&gt;我们也会遇到手动使用框架的情况，.a和framework最为常见，这些都是静态库；&lt;/p&gt;

&lt;p&gt;使用流程一般是：&lt;/p&gt;

&lt;p&gt;1、拖入项目&lt;/p&gt;

&lt;p&gt;2、buildsetting的library search paths 正确设置即可&lt;/p&gt;

&lt;p&gt;如果使用的框架进行了category的操作则需要在other link flag 加上-Objc&lt;/p&gt;

&lt;p&gt;就酱紫！&lt;/p&gt;

&lt;h2 id=&quot;制作框架&quot;&gt;制作框架&lt;/h2&gt;

&lt;p&gt;一下步骤转载自http://www.jianshu.com/p/90f5ec723175&lt;/p&gt;

&lt;h3 id=&quot;a静态库制作&quot;&gt;.a静态库制作&lt;/h3&gt;

&lt;p&gt;1、先创建一个新的Xcode工程Test，需要选择下面这个模板：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8aa6f5a0650b943eaf2bc70c1206838f.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8aa6f5a0650b943eaf2bc70c1206838f.png&quot; alt=&quot;111608265-f8f309461eadf0fc&quot; /&gt;&lt;/a&gt;选择模板&lt;/p&gt;

&lt;p&gt;创建完成后是这个样子的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/02888cb0553c6fb5a0bad0c92b016f9d.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/02888cb0553c6fb5a0bad0c92b016f9d.png&quot; alt=&quot;121608265-9fbbdb7c25721b33&quot; /&gt;&lt;/a&gt;创建工程&lt;/p&gt;

&lt;p&gt;2、我们把默认生成的Test.h和Test.m删掉，重新创建一个类PrintString，在这个类里面添加一个单纯打印字符串的简单方法:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/0a3c8e121848b91e1324f5fc6680316f.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/0a3c8e121848b91e1324f5fc6680316f.png&quot; alt=&quot;131608265-2a3c78a381b5278c&quot; /&gt;&lt;/a&gt;PrintString.h&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/57337d75e1b1f6631b181d3968691aa9.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/57337d75e1b1f6631b181d3968691aa9.png&quot; alt=&quot;141608265-47e2d7c130863f6d&quot; /&gt;&lt;/a&gt;PrintString.m&lt;/p&gt;

&lt;p&gt;3、选择添加公开头文件
为了让使用者知道有哪些方法可以用，我们需要公开头文件，这里我们公开PrintString.h：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/60cb4b31b5250402392b3086d37ae83b.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/60cb4b31b5250402392b3086d37ae83b.gif&quot; alt=&quot;151608265-85e2a208770188e6&quot; /&gt;&lt;/a&gt;选择添加公开头文件&lt;/p&gt;

&lt;p&gt;4、修改配置
我们需要把&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Active Architecture Only&lt;/code&gt;修改为NO，否则生成的静态库就只支持当前选择设备的架构。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/38b1dc445015e7dbcdd71d6d9f40e2db.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/38b1dc445015e7dbcdd71d6d9f40e2db.gif&quot; alt=&quot;161608265-b8b14a2b4ef6f78b&quot; /&gt;&lt;/a&gt;修改配置&lt;/p&gt;

&lt;p&gt;5、然后编译
我们分别选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Generic iOS Device&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;任意一个模拟器&lt;/code&gt;各编译一次，编译完后，我们会看到工程中Products文件夹下的libTest.a由红色变成了黑色，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;show in finder&lt;/code&gt;，看看生成的文件：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/e34958602bd231e167e4c686a1f26d12.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/e34958602bd231e167e4c686a1f26d12.gif&quot; alt=&quot;171608265-1c79cd8e8a108af4&quot; /&gt;&lt;/a&gt;Untitled.gif&lt;/p&gt;

&lt;p&gt;我们看到它为真机和模拟器都生成了.a静态库。里面都包含我们选择公开的头文件。&lt;/p&gt;

&lt;p&gt;我们来看看静态库支持的框架：命令为&lt;code class=&quot;highlighter-rouge&quot;&gt;lipo -info 静态库名字&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/c2589262d8c92cc99bc271187eb5e6fd.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/c2589262d8c92cc99bc271187eb5e6fd.gif&quot; alt=&quot;181608265-12282289b9b59f2b&quot; /&gt;&lt;/a&gt;查看静态库支持的框架&lt;/p&gt;

&lt;p&gt;我们看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug-iphoneos&lt;/code&gt;里面的静态库支持的架构有&lt;code class=&quot;highlighter-rouge&quot;&gt;armv7&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt;所以它只能用于真机，在模拟器上会报错。&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug-iphonesimulator&lt;/code&gt;里面的静态库支持的架构有&lt;code class=&quot;highlighter-rouge&quot;&gt;i386&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt;，所以它只能用于模拟器，在真机上会报错。&lt;/p&gt;

&lt;p&gt;如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。命令格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;lipo -create 第一个.a文件的绝对路径 第二个.a文件的绝对路径 -output 最终的.a文件路径&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/2795e14248b73715d62bace9a665d2b3.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/2795e14248b73715d62bace9a665d2b3.gif&quot; alt=&quot;191608265-c4472265e6c2be4b&quot; /&gt;&lt;/a&gt;生成通用静态库&lt;/p&gt;

&lt;p&gt;我们看到生成了一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;libTest.a&lt;/code&gt;文件。这个静态库就支持所有模拟器和所有真机了。然后我们创建一个文件夹，把.a和头文件都放进去，我们最终需要使用的就是这个文件夹：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/7f2ba27b652fafce40aed049ce1bc901.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/7f2ba27b652fafce40aed049ce1bc901.gif&quot; alt=&quot;201608265-8497f7c22f2a3729&quot; /&gt;&lt;/a&gt;新建文件夹&lt;/p&gt;

&lt;p&gt;注意：为了开发方便，我们可以使用生成的通用静态库，但是最终上线的使用我们可以只导入真机的，这样工程的体积也会小一些。&lt;/p&gt;

&lt;h5 id=&quot;使用生成的a静态库&quot;&gt;使用生成的.a静态库&lt;/h5&gt;

&lt;p&gt;新建一个工程，将上面的通用静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/ecc4ac31bf456c36beccfcf136b5e090.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/ecc4ac31bf456c36beccfcf136b5e090.png&quot; alt=&quot;211608265-3b374fe4aeb0712a&quot; /&gt;&lt;/a&gt;Paste_Image.png&lt;/p&gt;

&lt;h3 id=&quot;frameworke静态库的制作&quot;&gt;.frameworke静态库的制作&lt;/h3&gt;

&lt;p&gt;1、先创建一个新的Xcode工程LibTest，需要选择下面这个模板：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/40571bf9ba8580f75140d41a86589978.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/40571bf9ba8580f75140d41a86589978.png&quot; alt=&quot;221608265-ecfa937ad49c0767&quot; /&gt;&lt;/a&gt;选择模板&lt;/p&gt;

&lt;p&gt;创建完成后是这个样子的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/9259b0a7a57f449b0da4112636a27c77.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/9259b0a7a57f449b0da4112636a27c77.png&quot; alt=&quot;231608265-18f4b924be05fa55&quot; /&gt;&lt;/a&gt;创建完成&lt;/p&gt;

&lt;p&gt;创建完成后我们可以看到，工程本身自带一个&lt;code class=&quot;highlighter-rouge&quot;&gt;LibTest.h&lt;/code&gt;文件和一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;2、我们创建一个类&lt;code class=&quot;highlighter-rouge&quot;&gt;PrintString&lt;/code&gt;，添加一个单纯打印字符串的简单方法:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/7560efebea4de981f630f53e0e3c593b.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/7560efebea4de981f630f53e0e3c593b.png&quot; alt=&quot;241608265-c3ea26c5d04b8481&quot; /&gt;&lt;/a&gt;PrintString.h&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/cf9c13d17d71e14ed9b713b332f90f03.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/cf9c13d17d71e14ed9b713b332f90f03.png&quot; alt=&quot;251608265-633ec0acf041c1d7&quot; /&gt;&lt;/a&gt;PrintString&lt;/p&gt;

&lt;p&gt;3、选择添加公开头文件
为了让使用者知道有哪些方法可以用，我们需要公开头文件，我们需要在 并且将&lt;code class=&quot;highlighter-rouge&quot;&gt;Target-&amp;gt;Build Phases-&amp;gt;Headers&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Projec&lt;/code&gt;t中要暴露的头文件拖拽到&lt;code class=&quot;highlighter-rouge&quot;&gt;Pulic&lt;/code&gt;里面，这里我们公开&lt;code class=&quot;highlighter-rouge&quot;&gt;PrintString.h&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/e02d3dbfb98a4e53a65a28a73bae64a2.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/e02d3dbfb98a4e53a65a28a73bae64a2.gif&quot; alt=&quot;261608265-9065d3303dfd7fba&quot; /&gt;&lt;/a&gt;选择添加公开头文件&lt;/p&gt;

&lt;p&gt;注意：暴露出来的头文件中import的其他类也得添加到public中暴露出来。如果不想将import的类暴露出来，那么在头文件中用@class 然后在对应的.m文件中再import。&lt;/p&gt;

&lt;p&gt;4、设置支持所有架构（和.a制作一样）
5、修改生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;Mach-O&lt;/code&gt;格式，因为动态库也可以是以framework形式存在，所以需要设置，否则默认打出来的是动态库。将&lt;code class=&quot;highlighter-rouge&quot;&gt;target-&amp;gt;BuildSetting-&amp;gt;Mach-o Type&lt;/code&gt; 设为&lt;code class=&quot;highlighter-rouge&quot;&gt;Static Library&lt;/code&gt;（默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;Dynamic Library&lt;/code&gt;）:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8b5a54f8488227956977ee8a2eec7aa5.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8b5a54f8488227956977ee8a2eec7aa5.png&quot; alt=&quot;271608265-9ac2a72c69317964&quot; /&gt;&lt;/a&gt;修改生成的Mach-O格式&lt;/p&gt;

&lt;p&gt;6、编译
我们分别选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Generic iOS Device&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;任意一个模拟器&lt;/code&gt;各编译一次，编译完后，我们会看到工程中Products文件夹下的LibTest.framework由红色变成了黑色，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;show in finder&lt;/code&gt;，看看生成的文件：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/9ac9e99bf137c436d409bae9410ef584.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/9ac9e99bf137c436d409bae9410ef584.gif&quot; alt=&quot;281608265-1398e58020675a44&quot; /&gt;&lt;/a&gt;编译&lt;/p&gt;

&lt;p&gt;我们看到它为真机和模拟器都生成了LibTest.framework静态库。&lt;/p&gt;

&lt;p&gt;我们来查看静态库支持的框架：与上面不同，命令为&lt;code class=&quot;highlighter-rouge&quot;&gt;lipo -info framework下的二进制文件名字&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/35987f34012e6d12e252ea47f61b9926.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/35987f34012e6d12e252ea47f61b9926.gif&quot; alt=&quot;291608265-71c93893b2b4787e&quot; /&gt;&lt;/a&gt;查看静态库支持的框架&lt;/p&gt;

&lt;p&gt;如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。合并的命令与上面不同的是：framework静态库合并的不是framework,而是framework下的二进制文件，命令为：
&lt;code class=&quot;highlighter-rouge&quot;&gt;lipo -create 第一个framework下二进制文件的绝对路径 第二个framework下二进制文件的绝对路径 -output 最终的二进制文件路径&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/84d0cda594a6c618a134a81f5004a582.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/84d0cda594a6c618a134a81f5004a582.gif&quot; alt=&quot;301608265-2dfc39f53cf5d8b4&quot; /&gt;&lt;/a&gt;合并二进制文件&lt;/p&gt;

&lt;p&gt;然后将任何一个framework中的二进制文件替换成合并后的二进制文件,然后把framework添加到要使用的项目中即可使用。&lt;/p&gt;

&lt;h5 id=&quot;使用生成的framework静态库&quot;&gt;使用生成的.framework静态库&lt;/h5&gt;

&lt;p&gt;新建一个工程，将静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/5296b2dd443d0c0a677886c4be9bbb1b.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/5296b2dd443d0c0a677886c4be9bbb1b.png&quot; alt=&quot;311608265-19407ac12a2506a3&quot; /&gt;&lt;/a&gt;Paste_Image.png&lt;/p&gt;

&lt;p&gt;注意：
如果静态库中有category类，则在使用静态库的项目配置中&lt;code class=&quot;highlighter-rouge&quot;&gt;Other Linker Flags&lt;/code&gt;需要添加参数&lt;code class=&quot;highlighter-rouge&quot;&gt;-ObjC&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;-all_load&lt;/code&gt;。
如果创建的framework类中使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;.tbd&lt;/code&gt;，则需要在实际项目中导入&lt;code class=&quot;highlighter-rouge&quot;&gt;.tbd&lt;/code&gt;动态库。&lt;/p&gt;

&lt;h5 id=&quot;运行调试静态库&quot;&gt;运行调试静态库&lt;/h5&gt;

&lt;p&gt;如果你是开发静态库的人，你会发现上面的方法只是制作静态库，并没有办法运行看效果和调试bug，这时候我们可以这样：
1、新建一个专门用来开发静态库的正常工程Test：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/64940afb5bfc9c843d2dea470b0470a4.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/64940afb5bfc9c843d2dea470b0470a4.png&quot; alt=&quot;321608265-1c5fbe82bb1c897e&quot; /&gt;&lt;/a&gt;新建工程&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/c1ce99aa15fdaf2297146649d8704196.png&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/c1ce99aa15fdaf2297146649d8704196.png&quot; alt=&quot;331608265-0e64cd5eb6268d74&quot; /&gt;&lt;/a&gt;建好的工程&lt;/p&gt;

&lt;p&gt;2、添加一个静态库的target&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/cc6ec1edacbe7fd2a7625d408ff1d299.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/cc6ec1edacbe7fd2a7625d408ff1d299.gif&quot; alt=&quot;341608265-d78a7606a7b2d70b&quot; /&gt;&lt;/a&gt;添加一个静态库的target&lt;/p&gt;

&lt;p&gt;我们看到它生成了几样东西:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个framework的target：在这里面修改静态库的配置们，例如支持的架构、要暴露的头文件们和Mach-O的配置。
一个LibTest文件夹：静态库里面的类们都放在这里面。
product文件夹下面的LibTest.framework：在这里show in finder找到编译后生成的静态库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3、开发调试代码&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8681b9395cad7d5172766f9a190548b3.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/8681b9395cad7d5172766f9a190548b3.gif&quot; alt=&quot;351608265-f4ac760cb598db22&quot; /&gt;&lt;/a&gt;开发调试代码&lt;/p&gt;

&lt;p&gt;我们看到程序可以正常运行，并可以在动态库里面蹲点运行。方便我们调试。&lt;/p&gt;

&lt;p&gt;4、确保代码没问题后，选择对应的target编译生成。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/15e60615d437927d00a4e14d6eef0b45.gif&quot;&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2016/11/15e60615d437927d00a4e14d6eef0b45.gif&quot; alt=&quot;361608265-51d077bb2bd12c60&quot; /&gt;&lt;/a&gt;编译生成&lt;/p&gt;

&lt;p&gt;5、后面的过程就与上面一样了。&lt;/p&gt;

</description>
        <pubDate>Tue, 30 May 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/30/iOS%E5%BA%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/30/iOS%E5%BA%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>git概述</title>
        <description>&lt;h1 id=&quot;1安装与配置&quot;&gt;1安装与配置&lt;/h1&gt;

&lt;h2 id=&quot;git-for-windows&quot;&gt;git for Windows&lt;/h2&gt;
&lt;p&gt;Windows上的一个git bash实现
&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;https://git-for-windows.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tortoisegit&quot;&gt;Tortoisegit&lt;/h2&gt;
&lt;p&gt;图形化的git管理工具，依赖于git bash
&lt;a href=&quot;https://tortoisegit.org/download/&quot;&gt;https://tortoisegit.org/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配置git提交的用户名和密码
&lt;em&gt;git config –global user.name zhangsan&lt;/em&gt;
&lt;em&gt;git config –global user.email&lt;/em&gt; &lt;a href=&quot;mailto:zhangsan@qq.com&quot;&gt;&lt;em&gt;zhangsan@qq.com&lt;/em&gt;&lt;/a&gt;
&lt;em&gt;git config –list查看git配置信息，–global是全局配置&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;生成ssh-key&quot;&gt;生成ssh key&lt;/h2&gt;

&lt;p&gt;Ssh key是为ssh方式连接授权的，当然也可以用http方式连接，这样每次在非开放下载和上传的仓库进行操作时，都会提示输入账号和密码进行单词操作授权。
&lt;em&gt;ssh-keygen -t rsa -C &quot;&lt;/em&gt; &lt;a href=&quot;mailto:zhangsan@qq.com&quot;&gt;&lt;em&gt;zhangsan@qq.com&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&quot;&lt;/em&gt;
连续按三次回车，这里设置的密码就为空了，并且创建了key，目标目录是~/.ssh/。
将~/.ssh/id_rsa.pub里的内容填写到中心仓库的ssh keys里进行授权，以后代码上传和下载都不需要输入账号和密码授权了。&lt;/p&gt;

&lt;h2 id=&quot;忽略列表配置&quot;&gt;忽略列表配置&lt;/h2&gt;
&lt;p&gt;以斜杠&quot;/&quot;开头表示目录；
以星号&quot;*&quot;通配多个字符；
以问号&quot;?&quot;通配单个字符；
以方括号&quot;[]&quot;包含单个字符的匹配列表；
以叹号&quot;!&quot;表示不忽略(跟踪)匹配到的文件或目录；
.gitignore
/build
*.im
!root.im&lt;/p&gt;

&lt;h1 id=&quot;2原理介绍&quot;&gt;2原理介绍&lt;/h1&gt;

&lt;p&gt;git是分布式版本管理工具，每个终端同时也是服务端。这点在本质上不同于svn。
被git版本管理的目录下，有个.git文件夹，这是git的版本控制信息和仓库配置信息。
 &lt;img src=&quot;/img/post/git功能介绍/仓库原理图.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3命令介绍&quot;&gt;3命令介绍&lt;/h1&gt;
&lt;h2 id=&quot;31帮助命令&quot;&gt;3.1帮助命令&lt;/h2&gt;
&lt;p&gt;git help #git命令帮助信息
_ git help -a #git命令帮助信息完整版_
_ git help status #git status命令帮助信息_&lt;/p&gt;

&lt;h2 id=&quot;32创建版本库&quot;&gt;3.2创建版本库&lt;/h2&gt;
&lt;p&gt;git init  #初始化本地版本库
git clone url  #克隆远程版本库&lt;/p&gt;

&lt;h2 id=&quot;33修改和提交&quot;&gt;3.3修改和提交&lt;/h2&gt;
&lt;p&gt;git add&lt;/p&gt;

&lt;p&gt;git add a.txt #添加一个文件到index&lt;/p&gt;

&lt;p&gt;_ git add . #添加当前目录到index_&lt;/p&gt;

&lt;p&gt;_ git add –all #添加所有文件到index_&lt;/p&gt;

&lt;p&gt;git commit #提交修改到本地仓库&lt;/p&gt;

&lt;p&gt;_ git commit -m “comment” #提交修改到本地仓库，同时加入提交日志_&lt;/p&gt;

&lt;p&gt;_ git commit –amend -m “comment” #将修改合并到最近一次提交_&lt;/p&gt;

&lt;p&gt;git status&lt;/p&gt;

&lt;p&gt;git diff #对比workspace与index&lt;/p&gt;

&lt;p&gt;_ git diff HEAD #对比workspace与index_&lt;/p&gt;

&lt;p&gt;_ git difftool #以图形化方式展示对比_&lt;/p&gt;

&lt;p&gt;git rm&lt;/p&gt;

&lt;p&gt;git mv&lt;/p&gt;

&lt;p&gt;git log&lt;/p&gt;

&lt;p&gt;_ git log -3  #显示最近3条提交日志_&lt;/p&gt;

&lt;p&gt;_  git log 1.txt  #查看基于1.txt文件的修改提交记录_&lt;/p&gt;

&lt;p&gt;_  git lg  #git log的一个带参命令别名，可以看到当前分支的分支关系和提交记录_&lt;/p&gt;

&lt;p&gt;git whatchanged  #显示修改记录里修改了哪些文件&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git whatchanged -1 #显示最近1次修改文件&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;git show  #查看最近一次提交内容&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git show commit_id  #查看commit_id对应的提交内容&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ git show -2  #查看最近2次的提交内容_&lt;/p&gt;

&lt;h2 id=&quot;34回退与撤销&quot;&gt;3.4回退与撤销&lt;/h2&gt;

&lt;p&gt;git reset  #将当前未提交的修改回退到workspace,git add的逆向，不修改代码&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git reset –hard  #将当前未提交的修改删除&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git reset commit_id  #回退到日志commit_id对应的位置，不修改代码_&lt;/p&gt;

&lt;p&gt;_  git reset –soft commit_id  #效果等同于上一条命令加git add –all_&lt;/p&gt;

&lt;p&gt;_  git reset –hard commit_id  #回退到日志commit_id对应的位置，且修改代码_&lt;/p&gt;

&lt;p&gt;_  git reset HEAD^  #回退最近一次提交_&lt;/p&gt;

&lt;p&gt;_  git reset HEAD~2  #回退最近2次提交_&lt;/p&gt;

&lt;p&gt;git revert&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git revert commit_id  #撤销指定提交&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git revert HEAD  #撤销最近一次提交_&lt;/p&gt;

&lt;h2 id=&quot;35分支与标签&quot;&gt;3.5分支与标签&lt;/h2&gt;

&lt;p&gt;git branch  #查看分支&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git branch dev  #创建分支dev&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git branch -d dev  #删除分支dev_&lt;/p&gt;

&lt;p&gt;_  git branch -a  #查看所有分支，包括远程分支_&lt;/p&gt;

&lt;p&gt;_  git branch –set-upstream dev origin/dev  #新建一个新本地分支与远程分支对应_&lt;/p&gt;

&lt;p&gt;_  git branch –set-upstream-to=origin/&amp;lt;branch&amp;gt; fix  #设置本地分支与远程分支对应关系，也可切换到远程分支，然后用git checkout -b &amp;lt;branch-name&amp;gt;创建并切换分支_&lt;/p&gt;

&lt;p&gt;git checkout dev  #切换到分支dev&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git checkout -b test  #创建并切换到分支test&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;git tag  #查看已创建的tag&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git tag tag_name  #创建tag&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git tad -d tag_name  #删除tag_&lt;/p&gt;

&lt;h2 id=&quot;36合并与衍合&quot;&gt;3.6合并与衍合&lt;/h2&gt;

&lt;p&gt;git merge dev  #合并dev分支到当前分支&lt;/p&gt;

&lt;p&gt;git rebase dev  #衍合指定分支到当前分支&lt;/p&gt;

&lt;h2 id=&quot;37远程操作&quot;&gt;3.7远程操作&lt;/h2&gt;

&lt;p&gt;git remote  #查看远程仓库&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git remote -v  #查看远程仓库详情&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git remote add name url  #添加一个远程&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git remote remove name  #删除一个远程_&lt;/p&gt;

&lt;p&gt;_  git remote prune origin  #远程被删除的分支，本地同步删除_&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git fetch  #从远程库获取提交&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git pull  #同步远程版本,git fetch + git merge FETCH_HEAD&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_  git pull origin dev  #同步远程分支origin/dev_&lt;/p&gt;

&lt;p&gt;git push  #提交到远程仓库&lt;/p&gt;

&lt;p&gt;_  git push origin master  #推送本地当前分支内容到远程remotes/origin/master_&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git&lt;/em&gt; &lt;em&gt;push origin –delete &amp;lt;branchName&amp;gt;  #删除远程分支&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;push origin –delete tag &amp;lt;tagname&amp;gt;  #删除远程tag&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;38其他&quot;&gt;3.8其他&lt;/h2&gt;

&lt;p&gt;git clean&lt;/p&gt;

&lt;p&gt;Git clean -d  #清除文件&lt;/p&gt;

&lt;p&gt;Git clean -df  #清除文件和目录&lt;/p&gt;

&lt;p&gt;git apply 1.patch  #应用补丁包&lt;/p&gt;

&lt;p&gt;git blame 1.txt   #查看1.txt最近一次修改记录&lt;/p&gt;

&lt;p&gt;git grep  #版本库管理的文件中搜索内容&lt;/p&gt;

&lt;p&gt;git bisect  #二分法查找某一次提交&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect start  #开始 bisect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect good xxxxxx #录入正确的 commit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect bad xxxxxx  #录入出错的 commit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect bad  #标记错误，决定二分法的方向&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect good  #标记正确，决定二分法的方向&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_ _ &lt;em&gt;git&lt;/em&gt; &lt;em&gt;bisect reset  #直到定位到出错的 commit，退出 bisect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;git stash  #暂存当前修改&lt;/p&gt;

&lt;p&gt;_  git stash list  #查看暂存列表_&lt;/p&gt;

&lt;p&gt;_ git stash apply  #恢复最近一次暂存内容_&lt;/p&gt;

&lt;p&gt;_ git stash apply stash@{1}  #恢复指定的某个暂存内容_&lt;/p&gt;

&lt;p&gt;_  git stash drop stash@{1}  #删除一个暂存内容_&lt;/p&gt;

&lt;p&gt;_ git stash clear  #清空暂存内容_&lt;/p&gt;

&lt;p&gt;git cherry-pick commit_id  #将其他分支的某次提交应用到当前分支&lt;/p&gt;

&lt;p&gt;gitk  #查看git分支关系等的一个图形化工具&lt;/p&gt;

&lt;p&gt;git gc  #版本库存储整理优化&lt;/p&gt;

&lt;p&gt;git gui  #以图形化界面展示git交互窗口&lt;/p&gt;

&lt;h1 id=&quot;4案例演示&quot;&gt;4案例演示&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;分支管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本地分支创建与删除&lt;/p&gt;

&lt;p&gt;远程分支创建与删除&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码修改与提交&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/git功能介绍/代码修改流程.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5学习检查&quot;&gt;5学习检查&lt;/h1&gt;

&lt;p&gt;1同步一个线上git仓库，并初始化本地的各个分支&lt;/p&gt;

&lt;p&gt;2一次典型的代码修改与提交&lt;/p&gt;

&lt;p&gt;3跟踪一个文件的修改提交记录&lt;/p&gt;

&lt;p&gt;4跟踪一个文件的每行最近修改记录&lt;/p&gt;

&lt;p&gt;5补丁制作与应用&lt;/p&gt;

&lt;p&gt;6有未提交的修改时，切换到其他分支处理问题&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Feb 2017 02:35:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/05/git%E6%A6%82%E8%BF%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/05/git%E6%A6%82%E8%BF%B0/</guid>
        
        <category>版本管理</category>
        
        
      </item>
    
      <item>
        <title>[linux]CI环境搭建之android篇</title>
        <description>&lt;h2 id=&quot;可持续集成ci之起源篇&quot;&gt;可持续集成（CI）之起源篇&lt;/h2&gt;

&lt;h3 id=&quot;背景介绍&quot;&gt;背景介绍&lt;/h3&gt;
&lt;p&gt;随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。 持续集成正是针对这一类问题的一种软件开发实践。&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;
&lt;p&gt;它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。&lt;/p&gt;

&lt;h2 id=&quot;可持续集成ci之搭建篇&quot;&gt;可持续集成（CI）之搭建篇&lt;/h2&gt;
&lt;p&gt;CI环境采用jenkins+svn+jdk+sdk+gradle+fir搭建&lt;/p&gt;

&lt;h3 id=&quot;jdk&quot;&gt;jdk&lt;/h3&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;通过官方下载安装&lt;a href=&quot;http://java.com/&quot;&gt;jdk&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;
&lt;p&gt;jdk环境变量配置：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;编辑文件&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加环境变量&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME=/此处为jdk目录路径/jdk1.8.0_111&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;JRE_HOME=/此处为jdk目录路径/jdk1.8.0_111/jre&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export JAVA_HOME JRE_HOME CLASS_PATH PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;退出（ESC）,并保存（：wq+Enter）&lt;/li&gt;
  &lt;li&gt;将配置文件刷入内存&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jenkins&quot;&gt;jenkins&lt;/h3&gt;

&lt;h4 id=&quot;安装-1&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;从 Jenkins 的主页上下载最新的 jenkins.war 下载，命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置-1&quot;&gt;配置&lt;/h4&gt;
&lt;p&gt;Jenkins默认端口为8080，易与其他服务端口冲突，此处改为8000作为jenkins访问端口（具体由情况而定），访问该端口，需要打开8000端口防火墙&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -I INPUT -p tcp --dport 8000 -j ACCEPT&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;启动jenkins&quot;&gt;启动jenkins&lt;/h4&gt;
&lt;p&gt;进入jenkins.war目录下，输入命令&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar jenkins.war  --httpPort=8000&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;访问jenkins&quot;&gt;访问jenkins&lt;/h4&gt;
&lt;p&gt;http://locahost:8000,若非本机则将locahost替换为jenkins所在主机ip地址，效果如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Jenkins_android/jenkins_longin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入账号即可登录&lt;/p&gt;

&lt;h3 id=&quot;svn&quot;&gt;svn&lt;/h3&gt;
&lt;p&gt;登录jenkins，安装插件Subversion Plug-in&lt;/p&gt;

&lt;h3 id=&quot;sdk&quot;&gt;sdk&lt;/h3&gt;

&lt;h4 id=&quot;安装-2&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;通过官方下载安装&lt;a href=&quot;https://developer.android.com/index.html&quot;&gt;sdk&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置-2&quot;&gt;配置&lt;/h4&gt;
&lt;p&gt;sdk环境变量配置：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;编辑文件 
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加环境变量&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export ANDROID_HOME=/此处为sdk目录路径/sdk&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;退出（ESC）,并保存（：wq+Enter）&lt;/li&gt;
  &lt;li&gt;将配置文件刷入内存&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;gradle&quot;&gt;gradle&lt;/h3&gt;

&lt;h4 id=&quot;安装-3&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;通过官方下载安装&lt;a href=&quot;https://gradle.org/gradle-download/&quot;&gt;gradle&lt;/a&gt;,此处选择gradle-2.14.1&lt;/p&gt;

&lt;h4 id=&quot;配置-3&quot;&gt;配置&lt;/h4&gt;
&lt;p&gt;gradle环境变量配置：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;编辑文件 
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加环境变量&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export GRADLE_HOME=/此处为gradle目录路径/gradle-2.14.1&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=$GRADLE_HOME/bin:$PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;退出（ESC）,并保存（：wq+Enter）&lt;/li&gt;
  &lt;li&gt;将配置文件刷入内存&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fir&quot;&gt;fir&lt;/h3&gt;
&lt;p&gt;通过 fir-cli 命令行的指令查看、上传、编译应用&lt;/p&gt;

&lt;h4 id=&quot;安装-4&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;fir-cli 使用 Ruby 构建，只要安装相应 ruby gem 即可:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install fir-cli --no-ri --no-rdoc&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此CI环境所需工具及插件安装配置完毕。&lt;/p&gt;

&lt;h2 id=&quot;可持续集成ci之应用篇&quot;&gt;可持续集成（CI）之应用篇&lt;/h2&gt;
&lt;p&gt;1.登录进入jenkins主页，点击“新建”，创建项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Jenkins_android/jenkins_create.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.配置项目源码管理
创建项目成功后，进入项目配置页面，配置项目源码管理参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Jenkins_android/jenkins_svn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.配置构建参数
配置编译、打包、上传分发平台参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Jenkins_android/jenkins_build.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;至此项目基础配置完成，可实现项目构建，并分发。&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/14/CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Bandroid%E7%AF%87/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/14/CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Bandroid%E7%AF%87/</guid>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>【Mysql】掌麦Mysql数据库设计规范文档x</title>
        <description>&lt;p&gt;1.数据库表引擎使用InnoDB&lt;/p&gt;

&lt;p&gt;2.数据库表名命名规则：
	A.所有表名全部小写，单词与单词之间用下划线连接
	B.所有表名尽量使用全英文，不得简写
	C.所有表名必须加表前缀【比如：zm_】
	D.所有表名要求能够直观反映表含义
	E.所有表名必须写明注释&lt;/p&gt;

&lt;p&gt;3.数据库字段命名规则：
	A.所有字段名全部小写，单词与单词之间用下划线连接
	B.所有字段名尽量使用全英文，不得简写
	C.所有字段名要求能够直观反映字段含义
	D.所有字段必须写明注释&lt;/p&gt;

&lt;p&gt;4.所有表的主键全部使用id作为自增长主键，并且为unsigned&lt;/p&gt;

&lt;p&gt;5.所有字段都不能为NULL&lt;/p&gt;

&lt;p&gt;6.类型字段使用tinyint【比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;is_delete&lt;/code&gt; tinyint(1) NOT NULL】&lt;/p&gt;

&lt;p&gt;7.所有浮点数一律使用decimal&lt;/p&gt;

&lt;p&gt;8.所有与价格相关的浮点数统一标定4位小数点&lt;/p&gt;

&lt;p&gt;9.除特定时间日期格式字段外，所有的时间相关字段都使用int(11)存入时间戳&lt;/p&gt;

&lt;p&gt;10.所有外键统一使用表名 + 字段名形式&lt;/p&gt;

&lt;p&gt;字段设计规范&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;手机都使用&lt;strong&gt;mobile&lt;/strong&gt;/电话用&lt;strong&gt;phone&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;手机/电话号码都使用&lt;strong&gt;char&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;有需要处理的字段加后缀&lt;strong&gt;xxx_str&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;编号统一使用&lt;strong&gt;xxx_code&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;名称统一使用&lt;strong&gt;xxx_name&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;字符串&lt;strong&gt;var_char&lt;/strong&gt;长度使用32的倍数如（32，64，128）&lt;/li&gt;
  &lt;li&gt;省、市、区都使用id来关联(&lt;strong&gt;province_id&lt;/strong&gt;,&lt;strong&gt;city_id&lt;/strong&gt;,&lt;strong&gt;area_id&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;执照使用&lt;strong&gt;xxx_license&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;姓名/实名使用&lt;strong&gt;fullname&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;身份证号码：&lt;strong&gt;id_card_no&lt;/strong&gt;,身份证复印件：&lt;strong&gt;id_card_img&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;传真一律使用&lt;strong&gt;fax&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;登录名称使用&lt;strong&gt;xxx_account&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;密码使用&lt;strong&gt;xxx_passwd&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;介绍使用&lt;strong&gt;xxx_introduce&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;时间戳用&lt;strong&gt;xxx_time&lt;/strong&gt;/日期用&lt;strong&gt;xxx_date&lt;/strong&gt;(数据量大的表保存一个日期做索引筛选)&lt;/li&gt;
  &lt;li&gt;最后的XX使用&lt;strong&gt;last_xx&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;次数使用&lt;strong&gt;count&lt;/strong&gt;/数量用&lt;strong&gt;number&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;开始&lt;strong&gt;start&lt;/strong&gt;/结束&lt;strong&gt;end&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;授权使用&lt;strong&gt;empower&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;状态使用&lt;strong&gt;status&lt;/strong&gt;（0和null弃用）&lt;/li&gt;
  &lt;li&gt;总量使用&lt;strong&gt;total_xxx&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;金额统一使用&lt;strong&gt;amount  decimal(x,6)&lt;/strong&gt;  x等于10W的10倍数&lt;/li&gt;
  &lt;li&gt;会员 &lt;strong&gt;user_xxx&lt;/strong&gt;/员工&lt;strong&gt;member_xxx&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;系统用户  &lt;strong&gt;system_id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;超市用户 &lt;strong&gt;xxx_user_id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;全拼 &lt;strong&gt;pinyin_full&lt;/strong&gt;/简拼 &lt;strong&gt;pinyin_simple&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;头像 &lt;strong&gt;avatar&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;有删除的地方加个删除时间戳字段  &lt;strong&gt;delete&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;自增主键统一使用&lt;strong&gt;id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;备注统一使用&lt;strong&gt;remark&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;外联主键id的时候加前缀区分   &lt;strong&gt;xxxx_order_id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;内容统一是用&lt;strong&gt;content&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;子级字段统一使用&lt;strong&gt;child_xxx&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;性别字段使用&lt;strong&gt;gender&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;实际金额字段改成&lt;strong&gt;real_amount&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;联系人使用&lt;strong&gt;contact&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;随机码一律使用&lt;strong&gt;salt&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;头像使用&lt;strong&gt;avatar&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ip使用ip2long函数来转化成整数* 微信支付&lt;strong&gt;wechat_pay&lt;/strong&gt;/支付宝支付&lt;strong&gt;ali_pay&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 01:30:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/13/%E6%8E%8C%E9%BA%A6Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/13/%E6%8E%8C%E9%BA%A6Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3/</guid>
        
        <category>规范</category>
        
        <category>Mysql</category>
        
        
      </item>
    
      <item>
        <title>我的程序猿生存手册</title>
        <description>&lt;h1 id=&quot;我的程序猿生存手册&quot;&gt;我的程序猿生存手册&lt;/h1&gt;

&lt;p&gt;在高考大军中拼杀过，也在大学校园中荒芜过，曾经低迷消沉，也常满怀壮志…… 但是最多的还是被称为小伙子以及自称为iOS工程师！博主就是这种喜闻乐见的这类人，实习一年后在毕业季顺利拿到了我们公司的offer，也许相比很多毕业季的同学职场上顺利许多，但当深夜来临，显示器熄灭后望着荧幕出神的时候，毕业季我错过了很多也许一辈子都不会再相见的同学们的合影。这两年里真正领略到了企业项目的开发的艰辛，以及团队协作的魅力，有太多太多的要说，终将其汇成一句话：我还活着。&lt;/p&gt;

&lt;p&gt;图1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两年时间，反正撸啊撸段位已经是万劫不复了，iOS10一发布加班的觉悟早有了，潜伏的XCodeGhost也被拎出来了，各种被脱裤的同行大佬们也是尿了一地，哥也被吓了一哆嗦，赶忙修改了1024的账号密码…… 2015、2016年就是伴随这些琐事发展着，但是博主作为一个初入职场工作总结当然不会是简单地流水账。&lt;/p&gt;

&lt;p&gt;我知道你们都惦记着什么是1024，1024就是，呵呵，就是一款妈妈都说好玩的游戏啊~。&lt;/p&gt;

&lt;h2 id=&quot;学习&quot;&gt;学习&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;干挨踢的学会学习远比你死背一个功能的代码来的有用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PS：举的都是iOS开发中的栗子&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在iOS学习中去尝试体会Cocoa模式，多留意Cocoa中的框架的类，他们的命名都有规范，相似抽象的对象会有相似的方法或者写法，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutable&lt;/code&gt;的类可能都有&lt;code class=&quot;highlighter-rouge&quot;&gt;addXX&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;appendXX&lt;/code&gt;方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;类型的类可能都会有&lt;code class=&quot;highlighter-rouge&quot;&gt;enumerateXX&lt;/code&gt;的遍历方法……，又比如一个类的功能如果注重过程的话，苹果会选择使用&lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;的方式，注重结果的话则会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; ，学会总结比较、触类旁通、举一反三！&lt;/p&gt;

&lt;p&gt;如果你能做到对Cocoa模式很熟悉的话，那么最新的3DTouch功能直接看类的头文件就会用了。&lt;/p&gt;

&lt;p&gt;并且，第三方优秀的、热门的库都会遵循这一套编写规范，所以使用起来或者修改起来也才能够游刃有余！除了&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot;&gt;ReactiveCocoa&lt;/a&gt;之流除外。。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;学习时候看一本书远没有敲一个项目来的有效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看书的时候总是会犯一个毛病，就是一看就懂，一写就懵。所以学习技术，我更推荐的是实践检真知！敲出来的代码才是学习到的，因为你在电脑前，你遇到不懂的你可以立刻Google，看到感兴趣的新类可以直接&lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;左键&lt;/code&gt;查看文档或者&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;左键&lt;/code&gt;直接摆出头文件一览无遗！&lt;/p&gt;

&lt;p&gt;当然&lt;a href=&quot;https://developer.apple.com/wwdc/&quot; target=&quot;_blank&quot;&gt;WWDC&lt;/a&gt;别忘了看看，这是iOS最前沿的技术教学，即使听不懂也没关系，把音频外放，同事问你：哇，你听得懂呀。你微微一笑答道：听不懂。留下认真聆听却似享受的一道背影给同事，那可是满满的逼格。。呵呵，其实不然，视频中有大量PPT，有关键字，拿出来Google一番，再敲打一番，肯定你心中会觉得不虚此举哈，这样也锻炼了英文水平，这样的一波绝逼不亏呀。&lt;/p&gt;

&lt;p&gt;说到英文，这个是技术进阶的基础，不要畏惧，刚开始看一篇英文文档可能花费你一天的时间，但是这才是第一手资料！国内译者的水平毕竟参差不齐，谬误在所难免，而且二手的资料，对于充满处女情结的你能接受么？能忍么？所以百度还是用来搜搜绯闻、床照之流就好，技术索引真不是它的强项，搜出来的东西都是&lt;code class=&quot;highlighter-rouge&quot;&gt;deprecated&lt;/code&gt;的，实在浪费感情。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nshipster.com/&quot; target=&quot;_blank&quot;&gt;NSHipster&lt;/a&gt;、&lt;a href=&quot;https://www.objc.io/&quot; target=&quot;_blank&quot;&gt;Objc.io&lt;/a&gt; ……都是不错的去处，大量的紧巴巴的干货，他们都有中文版，但是最新的资料的中文版还是会相对滞后。&lt;/p&gt;

&lt;p&gt;再一个就是大婶们的博客，一天不读都浑身难受！&lt;/p&gt;

&lt;p&gt;之前拜阅&lt;a href=&quot;http://blog.devtang.com/&quot; target=&quot;_blank&quot;&gt;唐巧Boy&lt;/a&gt;的新书的时候，有一个博客列表非常不错，强势插入我的&lt;a href=&quot;http://feedly.com/&quot; target=&quot;_blank&quot;&gt;Feedly&lt;/a&gt;列表，我自己也有一些关注的大婶也加入了列表当中，这里给出分享OPML&lt;a href=&quot;https://daiweilai.github.io/attach/feedly.opml&quot;&gt;拿去玩&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;沙龙、研讨什么的可以适当参加，看看荧幕外的世界，不要老说没有搞iOS的姑娘。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. Feedly是一个RSS订阅平台&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;团队&quot;&gt;团队&lt;/h2&gt;

&lt;p&gt;讲一个故事：从前有个产品经理，他修改了3次需求，第二天他死了。&lt;/p&gt;

&lt;p&gt;博主只想说的是，若不是博主心慈，我想我公司的产品经理已经死完后投胎又死一百次了。&lt;/p&gt;

&lt;p&gt;我们都知道项目完成的水平直接由团队中是否有高效的协作而决定，也许有很多程序员长期的孤高冷艳惯了，他们说自己不需要团队！自己一个人就可以搞定一切，自己是UI、UE、产品、编码、测试甚至后端一条龙拿下，但是你将没有女朋友！！！&lt;/p&gt;

&lt;p&gt;团队协作远比个人的英雄主义更有魅力，个人认为！&lt;/p&gt;

&lt;p&gt;当下的快速迭代的大环境下，企业级开发下英雄主义是不太可取也不太可行的，所以融入团队，学会交流是工作顺利进展的保证；&lt;/p&gt;

&lt;p&gt;当然团队协作中是否高效是否愉快就需要交流技巧了，每个人都有自恋的情节，即使是自己的工作技能也是如此，所以世界上存在着各种鄙视链&lt;/p&gt;

&lt;p&gt;图2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;举一个简单地例子吧&lt;/p&gt;

&lt;p&gt;公司常见撕逼的三个部门：研发部、产品部、市场部&lt;/p&gt;

&lt;p&gt;研发的看不起产品、市场，觉得他们都不懂技术，只是天马行空，遇到Bug还大惊小怪……&lt;/p&gt;

&lt;p&gt;产品的觉得自己的设计是天才的设定，参考了社会伦理学，色彩心理学，严格的人体工学设计……反驳自己的都是傻逼……&lt;/p&gt;

&lt;p&gt;市场的觉得自己深入客户，自己才是最了解这个产品市场的，所产品应该按自己的市场为导向，颜色不对，字体客户肯定不喜欢，改改改……&lt;/p&gt;

&lt;p&gt;在排除消极因素，投机倒把的极个别人存在，团队中的成员还是希望共同的目标能够完美的实现的，也就是说其实我们的“争吵”也是为了更好的产品，但是“争吵”的度确实很难把握，难免就因为工作却伤了私下的感情，这也是离职中众多原因之一，频繁的离职却会使得你的职业生涯成长增加时间成本，所以更好的工作方式是“学会交流”。&lt;/p&gt;

&lt;p&gt;“学会交流”不单单是工作中用到，这也是我们的一生的学问！&lt;/p&gt;

&lt;p&gt;例如有时候，产品部门不是很负责任的频繁变更需求，这可苦了研发的成员，你便可以玩笑似的给他讲一个故事：从前有个产品经理，他修改了3次需求……，我想这样的诙谐即会是的工作氛围愉悦许多也可能让产品的同事知道自己不负责任行为的影响。&lt;/p&gt;

&lt;p&gt;但是需求变更，这个是研发一直要面对课题，所以你必须学会“预置性开发”，预置性包括使用一些优秀的设计模式的使用降低模块间的耦合，增加系统维护的灵活性，也可以有类似&lt;code class=&quot;highlighter-rouge&quot;&gt;Placeholder&lt;/code&gt;的编码技巧，来随时应对不期而遇的需求变更，具体的做法，这也许需要另开一篇博文来讲述。&lt;/p&gt;

&lt;h2 id=&quot;健康&quot;&gt;健康&lt;/h2&gt;

&lt;p&gt;如果还没有升职加薪，当上总经理，出任CTO，迎娶白富美，走向人生巅峰。却出师未捷身先死，这个都不太好玩，身边的同事以及博主自己都有或多或少的职业病产生了，博主躬亲力行地验证了一个道理：樯橹灰飞烟灭！别说撸代码还真的很带感，根本停不下来，所以最后颈椎，肩膀就是各种不适。说多都是泪，不过后来博主秉承了国人”先污染后治理”的方针，总算把身子调过来了，秘笈如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;练此功，不强制自宫&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好吧，这才是第一条，”不可久坐”x循环3次！！很重要，久坐流入脑子的血液会增加，从而造成下肢浮肿。由于久坐只限于局部肌肉活动，缺乏全身较大肌群动作，时间一长，久不动作的肌肉会逐步萎缩，机能衰退，还会使心、肺的后备能力降低，不能适应肌肉活动对血液循环和氧气供应的要求，一动就会心跳气急。肌肉长期不活动，热量消耗少，会加重脂肪和糖的代谢障碍，导致身体过分肥胖、动脉硬化及糖尿病。而且久坐一般皮肤质量较差，长时间静坐，受压血液流通不畅，易引起臂部瘙痒和隐痛，伏案工作者更甚，长期下去易导致颈椎炎，肩周炎，腰椎突出，脊柱变弯……我编不下去了，就问你怕不怕！！！所以多起身活动往非技术部走走，不然就会生病的哟(认不出雌性生物了)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;坐姿&lt;/p&gt;

    &lt;p&gt;图2&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;尝试全键盘操作，多记记几个快捷键世界就安静了，反正博主的magic mouse干电池已扣，什么你的是最新款的鼠标没干电池？那为了你的健康着想拿给博主用吧，可减少手腕以及肩膀劳损的风险。这里分享一个Mac屏幕效率工具&lt;a href=&quot;http://www.irradiatedsoftware.com/&quot; target=&quot;_blank&quot;&gt;SizeUp&lt;/a&gt; 可减少鼠标的使用！&lt;/li&gt;
  &lt;li&gt;运动运动运动！不要在被人黑了，老是被黑码农，油头垢面，肾虚患者……有意思么？我们是改变世界的工程师！不要再穿拖鞋上班了！！大家薪水都不低，穿得体面点吧。你可以和博主一样帅的。&lt;/li&gt;
  &lt;li&gt;努力陪伴回你身边一直陪伴着你的人，那使你的精神最远是最佳的状态！什么，还单身？那就多打打电话给你妈妈吧，那是最美的人。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;追求&quot;&gt;追求&lt;/h2&gt;

&lt;p&gt;不要担心30岁要转行，不要认为30K就是终点，不要一天工作30个小时。保持初心。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O ever youthful,O ever weeping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;我的个人博客也托管在了Github.io上，喜闻乐见的Jekll加借鉴&lt;del&gt;(抄袭)&lt;/del&gt;的精美主题构建而成，反正样子应该还看得过去，如果大家有兴趣想了解iOS程序员为何日撸万行代码？数百奇巧淫技如何施展？无数干货为何频频送出？究竟编译器背后又隐藏着什么？这一切的背后是技术与生活的碰撞还是高效与投机的权衡？我真TM编不下去了，欢迎前往 &lt;a href=&quot;https://daiweilai.github.io&quot; target=&quot;_blank&quot;&gt;[任意门]&lt;/a&gt;围观。&lt;/p&gt;

&lt;p&gt;严肃地，如果你刚开始学习iOS开发或许可以从我这里得到一些半干货。&lt;/p&gt;

&lt;p&gt;祝大家生活愉快！&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/12/%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/12/%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>【Docker】Docker简介与安装</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简介&quot; id=&quot;markdown-toc-简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#核心组件&quot; id=&quot;markdown-toc-核心组件&quot;&gt;核心组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#作用&quot; id=&quot;markdown-toc-作用&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装&quot; id=&quot;markdown-toc-安装&quot;&gt;安装&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#macos&quot; id=&quot;markdown-toc-macos&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#liunx&quot; id=&quot;markdown-toc-liunx&quot;&gt;Liunx&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#windows&quot; id=&quot;markdown-toc-windows&quot;&gt;windows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#运行&quot; id=&quot;markdown-toc-运行&quot;&gt;运行&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#macos-1&quot; id=&quot;markdown-toc-macos-1&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#liunx-1&quot; id=&quot;markdown-toc-liunx-1&quot;&gt;Liunx&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#windows-1&quot; id=&quot;markdown-toc-windows-1&quot;&gt;windows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记得2015年的某个夏天，那时候我还是个胖屌丝，拉着屌丝基友去参加开源中国的成都源创汇，碰到了张小龙，哦不，是张海龙大哥来推广Docker，那时候我怀着一颗敬畏的心满怀激情满脑懵逼的跟着海龙哥徜徉在Docker的海洋中，虽然直到听完我都不晓得Docker是个撒子。
结果17年开头的胖屌丝就不得不入Docker的坑了，开始了苦逼的Docker踩坑之旅。&lt;/p&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;Docker是一个能够把开发的应用程序自动部署到容器的开源引擎。由Docker公司(&lt;a href=&quot;http://www.docker.com&quot;&gt;点击我&lt;/a&gt;,前dotCloud公司，PaaS市场中的老牌提供商)的团队编写，基于Apache2.0开源协议发行。
    相对于其他的容器呢，Docker有以下特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提供了一个简单、轻量的建模方式&lt;/li&gt;
  &lt;li&gt;职责的逻辑分离&lt;/li&gt;
  &lt;li&gt;快速、高效的开发生命周期&lt;/li&gt;
  &lt;li&gt;鼓励使用面向服务的架构&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;核心组件&quot;&gt;核心组件&lt;/h2&gt;

&lt;p&gt;Docker有以下几个核心组建组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker客户端和服务器&lt;/li&gt;
  &lt;li&gt;Docker镜像&lt;/li&gt;
  &lt;li&gt;Regstry&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker容器&lt;/p&gt;

    &lt;p&gt;这些组件在下面使用的过程中基本上都会用到。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;作用&quot;&gt;作用&lt;/h2&gt;

&lt;p&gt;扯了这么多，我们到底能拿Docker来干撒:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;加快本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享Docker容器。容器可以再开发环境中构建，然后轻松地提交到测试环境中，并最终进入生产环境。&lt;/li&gt;
  &lt;li&gt;能够让独立服务或应用程序在不同的环境中，得到相同的运行结果。这一点再面向服务的架构和重度依微型服务的部署中尤其实用。&lt;/li&gt;
  &lt;li&gt;用Docker创建的隔离环境来测试。例如，用Jenkins，CI这样的持续集成工具启动一个用于测试的容器。&lt;/li&gt;
  &lt;li&gt;Docker可以让开发者先在本机上构建一个复杂的程序或者架构来进行测试，而不是一开始就在生产环境部署，测试。&lt;/li&gt;
  &lt;li&gt;构建一个多用户的平台即服务（PaaS）基础设施。&lt;/li&gt;
  &lt;li&gt;为开发、测试提供一个轻量级的独立沙盒环境，或者将独立的沙盒环境用于技术教学，如Unix shell的使用、编程语言教学。&lt;/li&gt;
  &lt;li&gt;提供软件即服务（SaaS：掌麦正在做的这种）应用程序，如Memcached即服务。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高性能、超大规模的宿主机部署。&lt;/p&gt;

    &lt;p&gt;现阶段呢，我们只是拿Docker来统一开发测试环境，用prod环境的配置搭起dev，test，beta的开发环境。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;h6 id=&quot;macos&quot;&gt;MacOS&lt;/h6&gt;

&lt;p&gt;下载安装包直接安装（&lt;a href=&quot;https://download.docker.com/mac/stable/Docker.dmg&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;h6 id=&quot;liunx&quot;&gt;Liunx&lt;/h6&gt;

&lt;p&gt;1.centos&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.ubuntu&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;windows&quot;&gt;windows&lt;/h6&gt;

&lt;p&gt;下载安装包直接安装（&lt;a href=&quot;https://download.docker.com/win/stable/InstallDocker.msi&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;h6 id=&quot;macos-1&quot;&gt;MacOS&lt;/h6&gt;

&lt;p&gt;点击Docker&lt;/p&gt;

&lt;h6 id=&quot;liunx-1&quot;&gt;Liunx&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    service docker start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;windows-1&quot;&gt;windows&lt;/h6&gt;

&lt;p&gt;双击Docker&lt;/p&gt;

&lt;p&gt;然后在命令行运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    docker info
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果如下图所示的话，骚年，恭喜你，你的Docker安装成功了！！！
&lt;img src=&quot;/img/post/Docker/QQ20170112-0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/12/Docker-Docker%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/12/Docker-Docker%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</guid>
        
        <category>Docker</category>
        
        <category>虚拟化</category>
        
        <category>分布式</category>
        
        <category>容器</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>【Queue】新手安装并使用Beanstalked</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#资料&quot; id=&quot;markdown-toc-资料&quot;&gt;资料&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#候选&quot; id=&quot;markdown-toc-候选&quot;&gt;候选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#核心&quot; id=&quot;markdown-toc-核心&quot;&gt;核心&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装&quot; id=&quot;markdown-toc-安装&quot;&gt;安装&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#macos&quot; id=&quot;markdown-toc-macos&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux-编译&quot; id=&quot;markdown-toc-linux-编译&quot;&gt;Linux-编译&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#liunx-包安装&quot; id=&quot;markdown-toc-liunx-包安装&quot;&gt;Liunx-包安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#windows&quot; id=&quot;markdown-toc-windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#运行&quot; id=&quot;markdown-toc-运行&quot;&gt;运行&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo点击我&quot; id=&quot;markdown-toc-demo点击我&quot;&gt;Demo（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/index.php&quot;&gt;点击我&lt;/a&gt;）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为公司项目准备要重构，根据当前业务的复杂度，为了降低系统业务耦合程度，需要在项目中引入消息队列机制。&lt;/p&gt;

&lt;h2 id=&quot;资料&quot;&gt;资料&lt;/h2&gt;

&lt;p&gt;在使用之前先来点资料普及下什么是消息队列，还有消息队列有什么用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=JOv29wGjBmYc32hlY9v8yAfcs925V0mA5n-ZBVUcNu_JMSr1Xkd0I4t6Uby0us5y_JFAU4a71QWUf16QyOv4SzIidc1YZ2G7ho5GO0u-42WnCMS--rflOrw4nZlS4zUX&quot;&gt;消息队列&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000005780973&quot;&gt;消息队列有什么用？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phpddt.com/php/queue.html&quot;&gt;PHP实现队列及队列原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/shaobingj126/article/details/50585035&quot;&gt;大型网站架构之分布式消息队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;候选&quot;&gt;候选&lt;/h2&gt;

&lt;p&gt;在当前的技术前景下，有以下几种队列选择：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=U2WYoeoyDZ1UdtsINkRQObR9rrDRviRDI9gfMpZ1QWl8mhAz5b20FfsYYyFEqF1Y2we9KJ4VMCso4uYziIVn_K&quot;&gt;JMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zeromq.org&quot;&gt;ZeroMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kafka.apache.org&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kr.github.io/beanstalkd/&quot;&gt;beanstakd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;核心&quot;&gt;核心&lt;/h2&gt;

&lt;p&gt;Beanstalkd设计里面的核心概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;job&lt;/li&gt;
  &lt;li&gt;tube&lt;/li&gt;
  &lt;li&gt;producer&lt;/li&gt;
  &lt;li&gt;consumer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;h6 id=&quot;macos&quot;&gt;MacOS&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`brew install beanstalkd`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;linux-编译&quot;&gt;Linux-编译&lt;/h6&gt;

&lt;p&gt;1.安装libevent（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/package/beanstalkd-1.10.tar&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://cloud.github.com/downloads/libevent/libevent/libevent-1.4.14b-stable.tar.gz
cp libevent-1.4.14b-stable.tar.gz /usr/local/src/ 
tar zxvf libevent-1.4.14b-stable.tar.gz 
cd  libevent-1.4.14b-stable 
./configure --prefix=/usr/local/libevent 
make 
make install 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.安装beanstalkd（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/package/beanstalkd-1.10.tar&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp beanstalkd-1.4.6.tar.gz /usr/local/src/ 
tar zxvf beanstalkd-1.4.6.tar.gz 
cd  beanstalkd-1.4.6 
./configure --prefix=/usr/local/beanstalkd 
make 
make install 
./beanstalkd -d -l 127.0.0.1 -p 11300 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;liunx-包安装&quot;&gt;Liunx-包安装&lt;/h6&gt;

&lt;p&gt;1.centos&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install beanstalkd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2.ubuntu&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install beanstalkd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;windows&quot;&gt;Windows&lt;/h6&gt;

&lt;p&gt;Windows果然是后娘养的，暂时没有官方提供的安装包只有国人修改的客户端，大家有兴趣的可以看看：&lt;a href=&quot;https://git.oschina.net/lomox/beanstalkd-win&quot;&gt;点击我&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;1.首先cd到Beanstalkd目录(配好环境变量的哥子除外)
2.后台启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beanstalkd -l 地址 -p 端口号 -z 最大的任务大小(byte) -c &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
-b DIR   wal directory

-f MS    fsync at most once every MS milliseconds (use -f0 for “always fsync”)
-F       never fsync (default)
-l ADDR  listen on address (default is 0.0.0.0)
-p PORT  listen on port (default is 11300)
-u USER  become user and group
-z BYTES set the maximum job size in bytes (default is 65535)
-s BYTES set the size of each wal file (default is 10485760)
(will be rounded up to a multiple of 512 bytes)
-c       compact the binlog (default)
-n       do not compact the binlog
-v       show version information
-V       increase verbosity
-h       show this help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;demo点击我&quot;&gt;Demo（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/index.php&quot;&gt;点击我&lt;/a&gt;）&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
    // 引入BeanStalk客户端类
    require('BeanStalk.class.php');

    $beanstalk = BeanStalk::open(array(
        'servers'       =&amp;gt; array( '127.0.0.1:11300' ),
        'select'        =&amp;gt; 'random peek'
    ));
    
    $beanstalk-&amp;gt;use_tube('foo');
    
    $beanstalk-&amp;gt;put(0, 0, 120, 'say hello world');
     $beanstalk-&amp;gt;watch('foo'); 
    $job = $beanstalk-&amp;gt;reserve_with_timeout(); 
    echo $job-&amp;gt;get();
    Beanstalk::delete($job);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/11/Queue-%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8Beanstalked/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/11/Queue-%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8Beanstalked/</guid>
        
        <category>Queue</category>
        
        <category>Beanstalked</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
