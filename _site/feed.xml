<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zmai掌麦技术团队博客</title>
    <description>记录技术相关的一切。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
<<<<<<< HEAD
    <pubDate>Fri, 13 Jan 2017 10:59:44 +0800</pubDate>
    <lastBuildDate>Fri, 13 Jan 2017 10:59:44 +0800</lastBuildDate>
=======
    <pubDate>Wed, 11 Jan 2017 17:08:49 +0800</pubDate>
    <lastBuildDate>Wed, 11 Jan 2017 17:08:49 +0800</lastBuildDate>
>>>>>>> 5ad04ce1697c3493c45e91bc97d401f8464c6634
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title></title>
        <description>&lt;h1 id=&quot;新的api&quot;&gt;新的API&lt;/h1&gt;
&lt;h2 id=&quot;sfspeechrecognizer框架&quot;&gt;SFSpeechRecognizer框架&lt;/h2&gt;
&lt;p&gt;全新的SFSpeechRecognizer框架的到来彻底改变了在以前我们处理语音识别非常的繁琐甚至很多时候可能需要借助于第三方框架处理的情况&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;可以实现连续的语音识别
    &lt;ol&gt;
      &lt;li&gt;可以对语 音文件或者语音流进行识别&lt;/li&gt;
      &lt;li&gt;最佳化自由格式的听写(可理解为多语言支持)和搜索式的字符串
示例：读取一段语音文件输出文字内容
￼￼&lt;code class=&quot;highlighter-rouge&quot;&gt;#import &amp;lt;Speech/Speech.h&amp;gt;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;//1.创建本地化标识符
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	NSLocale local =[NSLocale alloc initWithLocaleIdentifier:@&quot;zhCN&quot;];
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//2.创建一个语音识别对象
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	SFSpeechRecognizer sf =[SFSpeechRecognizer alloc initWithLocale:local];
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//3.将bundle 中的资源文件加载出来返回一个url
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	NSURL url =[NSBundle mainBundle URLForResource:@&quot;掌麦企业文化.mp3&quot; withExtension:nil];
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//4.将资源包中获取的url 传递给 request 对象
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	SFSpeechURLRecognitionRequest res =[SFSpeechURLRecognitionRequest alloc initWithURL:url];
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//5.发送一个请求
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	sf recognitionTaskWithRequest:res resultHandler:^(SFSpeechRecognitionResult  Nullable result, NSError  Nullable error) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;		if (error!=nil) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;			NSLog(@&quot;语音识别解析失败,%@&quot;,error);
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;		}else
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;			//解析正确
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;			NSLog(@“语音内容：@&quot;,result.bestTranscription.formattedString);
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;		}
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	}];
&lt;/code&gt;
        &lt;h2 id=&quot;sirikit&quot;&gt;SiriKit&lt;/h2&gt;
        &lt;p&gt;在iOS10之后，苹果希望Siri能够给用户带来更多的功能体验，基于这个出发点，新增了SiriKit框架。Siri通过语言处理系统识别与用户的对话，解析并生成用于描述对话的意图（Intent），然后通过Siri框架把该Intent分发给相应的应用程序进而获取内容或执行操作。（图片来源苹果官方文档 SiriKit Programming Guide） 
&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://obon901vh.bkt.clouddn.com/411AEAFA-2980-4DE9-BCB7-D274A3CFCD76.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
通过官方文档可以了解到SiriKit支持以下六类服务：&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;语音和视频通话
    &lt;ol&gt;
      &lt;li&gt;发送消息&lt;/li&gt;
      &lt;li&gt;收款或者付款&lt;/li&gt;
      &lt;li&gt;图片搜索&lt;/li&gt;
      &lt;li&gt;管理锻炼&lt;/li&gt;
      &lt;li&gt;行程预约&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;通知&quot;&gt;通知&lt;/h2&gt;
&lt;p&gt;新的通知框架新增了以下功能&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;整合统一了本地通知和远程通知
    &lt;ol&gt;
      &lt;li&gt;可以在通知中加入多媒体内容&lt;/li&gt;
      &lt;li&gt;可以获取App中的应用清单，可以触发通知时间，能更新这些通知，删除旧通知&lt;/li&gt;
      &lt;li&gt;可以通过代码获取用户的通知设置情况
￼&lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotifications.framework&lt;/code&gt;
（iOS10+， watchOS 3.0+，tvOS10.0+）
支持远程推送和本地通知的接收和发送，可以使用这个框架管理通知的发送基于地理位置和时间。同时应用程序扩展也可以使用该框架进行通知管理
&lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotificationsUI.framework&lt;/code&gt;
￼（iOS10+）
自定义展现在用户设备上的通知效果，前提是使用该框架定义一个程序扩展来接收并发送通知。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;foundation框架&quot;&gt;Foundation框架&lt;/h2&gt;
&lt;p&gt;新增NSISO8601DateFormatter类
新增NSDateInterval类型&lt;/p&gt;

&lt;h2 id=&quot;uitableview-和-uicollectionview-预加载&quot;&gt;UITableView 和 UICollectionView 预加载&lt;/h2&gt;
&lt;p&gt;众所周知，TableView和CollectionView的顺滑与否能够很大程度上影响用户的使用体验。这次Apple对这两个View又进行了一次优化。
在UITableView中新增了UITableViewDataSourcePrefetching协议并提供了下列方法（Swift）
&lt;code class=&quot;highlighter-rouge&quot;&gt;//此方法在TableViewCell进入屏幕前执行，完成网络请求或者复杂任务处理等耗时任务
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func tableView( tableView: UITableView, prefetchRowsAt indexPaths: IndexPath) 	
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//在用户快速滑动，突然停下，反向滑动时停止预加载
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func tableView( tableView: UITableView, cancelPrefetchingForRowsAt indexPaths: IndexPath) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;在UICollectionView中新增了UICollectionViewDataSourcePrefetching协议并提供了下列方法（Swift）
￼&lt;code class=&quot;highlighter-rouge&quot;&gt;//此方法在CollectionViewItem进入屏幕前执行，完成网络请求或者复杂任务处理等耗时任务，
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func collectionView( collectionView: UICollectionView, prefetchItemsAt indexPaths: IndexPath) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//在用户快速滑动，突然停下，反向滑动时停止预加载
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func collectionView( collectionView: UICollectionView, cancelPrefetchingForItemsAt indexPaths: IndexPath) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;gcd在swift30中的彻底改写&quot;&gt;GCD在Swift3.0中的彻底改写&lt;/h2&gt;
&lt;p&gt;GCD（Grand Central Dispatch）是iOS开发中的重要概念，平时开发中大多数多线程都会用到它。此次在Swift3.0的更新中彻底改了GCD的语法，我们将不再会看到类似dispatch_async，dispatch_sync这样的写法了，而是引入DispatchQueue这个类。
例如:在全局线程中定义一个常量，在主线程中打印出来
&lt;code class=&quot;highlighter-rouge&quot;&gt;DispatchQueue.global().async 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;  let test = &quot;Swift3.0 GCD&quot;
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; DispatchQueue.main.async 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	   print(test)
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;  }
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;￼除了使用DispatchQueue之外也可以自定义DispatchWorkItem。DispatchWorkItem 定义了一个操作的内部代码，以及优先级，特性等等。 它可以直接在任何队列中执行：
&lt;code class=&quot;highlighter-rouge&quot;&gt;let queue = DispatchQueue(label: &quot;Swift.queue&quot;)
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let workItem = DispatchWorkItem(qos: .userInitiated, flags: .assignCurrentContext) 
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; //执行操作  
&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;}
&lt;/code&gt;queue.async(execute: workItem)
￼对dispatch_time_t也进行了改进，语法使用起来更加简单。DispatchTime.now() 是当前事前， 然后加上 .seconds(60) 代表 60秒。￼
&lt;code class=&quot;highlighter-rouge&quot;&gt;let delay = DispatchTime.now() + .seconds(60)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;uiviewpropertyanimator&quot;&gt;UIViewPropertyAnimator&lt;/h2&gt;
&lt;p&gt;新的 UIViewPropertyAnimator 类可以更好地使用 UIView.animatedWithDuration API，借此可以实现很多功能，比如：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;中途中断动画，暂停，停止，恢复，逆转，控制进度
    &lt;ol&gt;
      &lt;li&gt;动画开始后改变值&lt;/li&gt;
      &lt;li&gt;改变 percentComplete 属性让动画更具交互性&lt;/li&gt;
      &lt;li&gt;或者甚至可以把 percentComplete 和 UIGestureRecognizer 结合在一起使用&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;uitabbar&quot;&gt;UITabBar&lt;/h2&gt;
&lt;p&gt;能够控制一个 tab bar item 的样式，比如背景颜色和文字属性。&lt;/p&gt;

&lt;h2 id=&quot;messages-api&quot;&gt;Messages API&lt;/h2&gt;
&lt;p&gt;新的框架，用于创建基于 iMessage 的新应用
能够创建 iMessage 的表情包&lt;/p&gt;

&lt;h1 id=&quot;xcode-里的新工具&quot;&gt;Xcode 里的新工具&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;新的可视化调试工具（Visual Debugging Tools），特别是内存和线程工具
    &lt;ol&gt;
      &lt;li&gt;新的代码签名机制&lt;/li&gt;
      &lt;li&gt;Xcode 扩展&lt;/li&gt;
      &lt;li&gt;在 Xcode 8 里允许你选择使用 Swift 2.3 还是 Swift 3.0&lt;/li&gt;
      &lt;li&gt;图片名字自动补全，代码中可以对颜色和图片文字化&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 10:59:44 +0800</pubDate>
        <link>http://localhost:4000/2017/01/13/2017-1-9-WWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/13/2017-1-9-WWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        
      </item>
    
      <item>
        <title>我的程序猿生存手册</title>
        <description>&lt;h1 id=&quot;我的程序猿生存手册&quot;&gt;我的程序猿生存手册&lt;/h1&gt;

&lt;p&gt;在高考大军中拼杀过，也在大学校园中荒芜过，曾经低迷消沉，也常满怀壮志…… 但是最多的还是被称为小伙子以及自称为iOS工程师！博主就是这种喜闻乐见的这类人，实习一年后在毕业季顺利拿到了我们公司的offer，也许相比很多毕业季的同学职场上顺利许多，但当深夜来临，显示器熄灭后望着荧幕出神的时候，毕业季我错过了很多也许一辈子都不会再相见的同学们的合影。这两年里真正领略到了企业项目的开发的艰辛，以及团队协作的魅力，有太多太多的要说，终将其汇成一句话：我还活着。&lt;/p&gt;

&lt;p&gt;图1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两年时间，反正撸啊撸段位已经是万劫不复了，iOS10一发布加班的觉悟早有了，潜伏的XCodeGhost也被拎出来了，各种被脱裤的同行大佬们也是尿了一地，哥也被吓了一哆嗦，赶忙修改了1024的账号密码…… 2015、2016年就是伴随这些琐事发展着，但是博主作为一个初入职场工作总结当然不会是简单地流水账。&lt;/p&gt;

&lt;p&gt;我知道你们都惦记着什么是1024，1024就是，呵呵，就是一款妈妈都说好玩的游戏啊~。&lt;/p&gt;

&lt;h2 id=&quot;学习&quot;&gt;学习&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;干挨踢的学会学习远比你死背一个功能的代码来的有用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PS：举的都是iOS开发中的栗子&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在iOS学习中去尝试体会Cocoa模式，多留意Cocoa中的框架的类，他们的命名都有规范，相似抽象的对象会有相似的方法或者写法，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutable&lt;/code&gt;的类可能都有&lt;code class=&quot;highlighter-rouge&quot;&gt;addXX&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;appendXX&lt;/code&gt;方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;类型的类可能都会有&lt;code class=&quot;highlighter-rouge&quot;&gt;enumerateXX&lt;/code&gt;的遍历方法……，又比如一个类的功能如果注重过程的话，苹果会选择使用&lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;的方式，注重结果的话则会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; ，学会总结比较、触类旁通、举一反三！&lt;/p&gt;

&lt;p&gt;如果你能做到对Cocoa模式很熟悉的话，那么最新的3DTouch功能直接看类的头文件就会用了。&lt;/p&gt;

&lt;p&gt;并且，第三方优秀的、热门的库都会遵循这一套编写规范，所以使用起来或者修改起来也才能够游刃有余！除了&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot;&gt;ReactiveCocoa&lt;/a&gt;之流除外。。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;学习时候看一本书远没有敲一个项目来的有效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看书的时候总是会犯一个毛病，就是一看就懂，一写就懵。所以学习技术，我更推荐的是实践检真知！敲出来的代码才是学习到的，因为你在电脑前，你遇到不懂的你可以立刻Google，看到感兴趣的新类可以直接&lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;左键&lt;/code&gt;查看文档或者&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;左键&lt;/code&gt;直接摆出头文件一览无遗！&lt;/p&gt;

&lt;p&gt;当然&lt;a href=&quot;https://developer.apple.com/wwdc/&quot; target=&quot;_blank&quot;&gt;WWDC&lt;/a&gt;别忘了看看，这是iOS最前沿的技术教学，即使听不懂也没关系，把音频外放，同事问你：哇，你听得懂呀。你微微一笑答道：听不懂。留下认真聆听却似享受的一道背影给同事，那可是满满的逼格。。呵呵，其实不然，视频中有大量PPT，有关键字，拿出来Google一番，再敲打一番，肯定你心中会觉得不虚此举哈，这样也锻炼了英文水平，这样的一波绝逼不亏呀。&lt;/p&gt;

&lt;p&gt;说到英文，这个是技术进阶的基础，不要畏惧，刚开始看一篇英文文档可能花费你一天的时间，但是这才是第一手资料！国内译者的水平毕竟参差不齐，谬误在所难免，而且二手的资料，对于充满处女情结的你能接受么？能忍么？所以百度还是用来搜搜绯闻、床照之流就好，技术索引真不是它的强项，搜出来的东西都是&lt;code class=&quot;highlighter-rouge&quot;&gt;deprecated&lt;/code&gt;的，实在浪费感情。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nshipster.com/&quot; target=&quot;_blank&quot;&gt;NSHipster&lt;/a&gt;、&lt;a href=&quot;https://www.objc.io/&quot; target=&quot;_blank&quot;&gt;Objc.io&lt;/a&gt; ……都是不错的去处，大量的紧巴巴的干货，他们都有中文版，但是最新的资料的中文版还是会相对滞后。&lt;/p&gt;

&lt;p&gt;再一个就是大婶们的博客，一天不读都浑身难受！&lt;/p&gt;

&lt;p&gt;之前拜阅&lt;a href=&quot;http://blog.devtang.com/&quot; target=&quot;_blank&quot;&gt;唐巧Boy&lt;/a&gt;的新书的时候，有一个博客列表非常不错，强势插入我的&lt;a href=&quot;http://feedly.com/&quot; target=&quot;_blank&quot;&gt;Feedly&lt;/a&gt;列表，我自己也有一些关注的大婶也加入了列表当中，这里给出分享OPML&lt;a href=&quot;https://daiweilai.github.io/attach/feedly.opml&quot;&gt;拿去玩&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;沙龙、研讨什么的可以适当参加，看看荧幕外的世界，不要老说没有搞iOS的姑娘。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. Feedly是一个RSS订阅平台&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;团队&quot;&gt;团队&lt;/h2&gt;

&lt;p&gt;讲一个故事：从前有个产品经理，他修改了3次需求，第二天他死了。&lt;/p&gt;

&lt;p&gt;博主只想说的是，若不是博主心慈，我想我公司的产品经理已经死完后投胎又死一百次了。&lt;/p&gt;

&lt;p&gt;我们都知道项目完成的水平直接由团队中是否有高效的协作而决定，也许有很多程序员长期的孤高冷艳惯了，他们说自己不需要团队！自己一个人就可以搞定一切，自己是UI、UE、产品、编码、测试甚至后端一条龙拿下，但是你将没有女朋友！！！&lt;/p&gt;

&lt;p&gt;团队协作远比个人的英雄主义更有魅力，个人认为！&lt;/p&gt;

&lt;p&gt;当下的快速迭代的大环境下，企业级开发下英雄主义是不太可取也不太可行的，所以融入团队，学会交流是工作顺利进展的保证；&lt;/p&gt;

&lt;p&gt;当然团队协作中是否高效是否愉快就需要交流技巧了，每个人都有自恋的情节，即使是自己的工作技能也是如此，所以世界上存在着各种鄙视链&lt;/p&gt;

&lt;p&gt;图2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;举一个简单地例子吧&lt;/p&gt;

&lt;p&gt;公司常见撕逼的三个部门：研发部、产品部、市场部&lt;/p&gt;

&lt;p&gt;研发的看不起产品、市场，觉得他们都不懂技术，只是天马行空，遇到Bug还大惊小怪……&lt;/p&gt;

&lt;p&gt;产品的觉得自己的设计是天才的设定，参考了社会伦理学，色彩心理学，严格的人体工学设计……反驳自己的都是傻逼……&lt;/p&gt;

&lt;p&gt;市场的觉得自己深入客户，自己才是最了解这个产品市场的，所产品应该按自己的市场为导向，颜色不对，字体客户肯定不喜欢，改改改……&lt;/p&gt;

&lt;p&gt;在排除消极因素，投机倒把的极个别人存在，团队中的成员还是希望共同的目标能够完美的实现的，也就是说其实我们的“争吵”也是为了更好的产品，但是“争吵”的度确实很难把握，难免就因为工作却伤了私下的感情，这也是离职中众多原因之一，频繁的离职却会使得你的职业生涯成长增加时间成本，所以更好的工作方式是“学会交流”。&lt;/p&gt;

&lt;p&gt;“学会交流”不单单是工作中用到，这也是我们的一生的学问！&lt;/p&gt;

&lt;p&gt;例如有时候，产品部门不是很负责任的频繁变更需求，这可苦了研发的成员，你便可以玩笑似的给他讲一个故事：从前有个产品经理，他修改了3次需求……，我想这样的诙谐即会是的工作氛围愉悦许多也可能让产品的同事知道自己不负责任行为的影响。&lt;/p&gt;

&lt;p&gt;但是需求变更，这个是研发一直要面对课题，所以你必须学会“预置性开发”，预置性包括使用一些优秀的设计模式的使用降低模块间的耦合，增加系统维护的灵活性，也可以有类似&lt;code class=&quot;highlighter-rouge&quot;&gt;Placeholder&lt;/code&gt;的编码技巧，来随时应对不期而遇的需求变更，具体的做法，这也许需要另开一篇博文来讲述。&lt;/p&gt;

&lt;h2 id=&quot;健康&quot;&gt;健康&lt;/h2&gt;

&lt;p&gt;如果还没有升职加薪，当上总经理，出任CTO，迎娶白富美，走向人生巅峰。却出师未捷身先死，这个都不太好玩，身边的同事以及博主自己都有或多或少的职业病产生了，博主躬亲力行地验证了一个道理：樯橹灰飞烟灭！别说撸代码还真的很带感，根本停不下来，所以最后颈椎，肩膀就是各种不适。说多都是泪，不过后来博主秉承了国人”先污染后治理”的方针，总算把身子调过来了，秘笈如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;练此功，不强制自宫&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好吧，这才是第一条，”不可久坐”x循环3次！！很重要，久坐流入脑子的血液会增加，从而造成下肢浮肿。由于久坐只限于局部肌肉活动，缺乏全身较大肌群动作，时间一长，久不动作的肌肉会逐步萎缩，机能衰退，还会使心、肺的后备能力降低，不能适应肌肉活动对血液循环和氧气供应的要求，一动就会心跳气急。肌肉长期不活动，热量消耗少，会加重脂肪和糖的代谢障碍，导致身体过分肥胖、动脉硬化及糖尿病。而且久坐一般皮肤质量较差，长时间静坐，受压血液流通不畅，易引起臂部瘙痒和隐痛，伏案工作者更甚，长期下去易导致颈椎炎，肩周炎，腰椎突出，脊柱变弯……我编不下去了，就问你怕不怕！！！所以多起身活动往非技术部走走，不然就会生病的哟(认不出雌性生物了)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;坐姿&lt;/p&gt;

    &lt;p&gt;图2&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://daiweilai.github.io/img/post/2015-11-11-pic3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;尝试全键盘操作，多记记几个快捷键世界就安静了，反正博主的magic mouse干电池已扣，什么你的是最新款的鼠标没干电池？那为了你的健康着想拿给博主用吧，可减少手腕以及肩膀劳损的风险。这里分享一个Mac屏幕效率工具&lt;a href=&quot;http://www.irradiatedsoftware.com/&quot; target=&quot;_blank&quot;&gt;SizeUp&lt;/a&gt; 可减少鼠标的使用！&lt;/li&gt;
  &lt;li&gt;运动运动运动！不要在被人黑了，老是被黑码农，油头垢面，肾虚患者……有意思么？我们是改变世界的工程师！不要再穿拖鞋上班了！！大家薪水都不低，穿得体面点吧。你可以和博主一样帅的。&lt;/li&gt;
  &lt;li&gt;努力陪伴回你身边一直陪伴着你的人，那使你的精神最远是最佳的状态！什么，还单身？那就多打打电话给你妈妈吧，那是最美的人。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;追求&quot;&gt;追求&lt;/h2&gt;

&lt;p&gt;不要担心30岁要转行，不要认为30K就是终点，不要一天工作30个小时。保持初心。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O ever youthful,O ever weeping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;我的个人博客也托管在了Github.io上，喜闻乐见的Jekll加借鉴&lt;del&gt;(抄袭)&lt;/del&gt;的精美主题构建而成，反正样子应该还看得过去，如果大家有兴趣想了解iOS程序员为何日撸万行代码？数百奇巧淫技如何施展？无数干货为何频频送出？究竟编译器背后又隐藏着什么？这一切的背后是技术与生活的碰撞还是高效与投机的权衡？我真TM编不下去了，欢迎前往 &lt;a href=&quot;https://daiweilai.github.io&quot; target=&quot;_blank&quot;&gt;[任意门]&lt;/a&gt;围观。&lt;/p&gt;

&lt;p&gt;严肃地，如果你刚开始学习iOS开发或许可以从我这里得到一些半干货。&lt;/p&gt;

&lt;p&gt;祝大家生活愉快！&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/12/%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/12/%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>【Queue】新手安装并使用Beanstalked</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#资料&quot; id=&quot;markdown-toc-资料&quot;&gt;资料&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#候选&quot; id=&quot;markdown-toc-候选&quot;&gt;候选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#核心&quot; id=&quot;markdown-toc-核心&quot;&gt;核心&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装&quot; id=&quot;markdown-toc-安装&quot;&gt;安装&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#macos&quot; id=&quot;markdown-toc-macos&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux-编译&quot; id=&quot;markdown-toc-linux-编译&quot;&gt;Linux-编译&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#liunx-包安装&quot; id=&quot;markdown-toc-liunx-包安装&quot;&gt;Liunx-包安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#windows&quot; id=&quot;markdown-toc-windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#运行&quot; id=&quot;markdown-toc-运行&quot;&gt;运行&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo点击我&quot; id=&quot;markdown-toc-demo点击我&quot;&gt;Demo（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/index.php&quot;&gt;点击我&lt;/a&gt;）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为公司项目准备要重构，根据当前业务的复杂度，为了降低系统业务耦合程度，需要在项目中引入消息队列机制。&lt;/p&gt;

&lt;h2 id=&quot;资料&quot;&gt;资料&lt;/h2&gt;

&lt;p&gt;在使用之前先来点资料普及下什么是消息队列，还有消息队列有什么用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=JOv29wGjBmYc32hlY9v8yAfcs925V0mA5n-ZBVUcNu_JMSr1Xkd0I4t6Uby0us5y_JFAU4a71QWUf16QyOv4SzIidc1YZ2G7ho5GO0u-42WnCMS--rflOrw4nZlS4zUX&quot;&gt;消息队列&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000005780973&quot;&gt;消息队列有什么用？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phpddt.com/php/queue.html&quot;&gt;PHP实现队列及队列原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/shaobingj126/article/details/50585035&quot;&gt;大型网站架构之分布式消息队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;候选&quot;&gt;候选&lt;/h2&gt;

&lt;p&gt;在当前的技术前景下，有以下几种队列选择：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=U2WYoeoyDZ1UdtsINkRQObR9rrDRviRDI9gfMpZ1QWl8mhAz5b20FfsYYyFEqF1Y2we9KJ4VMCso4uYziIVn_K&quot;&gt;JMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zeromq.org&quot;&gt;ZeroMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kafka.apache.org&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kr.github.io/beanstalkd/&quot;&gt;beanstakd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;核心&quot;&gt;核心&lt;/h2&gt;

&lt;p&gt;Beanstalkd设计里面的核心概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;job&lt;/li&gt;
  &lt;li&gt;tube&lt;/li&gt;
  &lt;li&gt;producer&lt;/li&gt;
  &lt;li&gt;consumer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;h6 id=&quot;macos&quot;&gt;MacOS&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`brew install beanstalkd`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;linux-编译&quot;&gt;Linux-编译&lt;/h6&gt;

&lt;p&gt;1.安装libevent（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/package/beanstalkd-1.10.tar&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://cloud.github.com/downloads/libevent/libevent/libevent-1.4.14b-stable.tar.gz
cp libevent-1.4.14b-stable.tar.gz /usr/local/src/ 
tar zxvf libevent-1.4.14b-stable.tar.gz 
cd  libevent-1.4.14b-stable 
./configure --prefix=/usr/local/libevent 
make 
make install 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.安装beanstalkd（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/package/beanstalkd-1.10.tar&quot;&gt;点击我&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp beanstalkd-1.4.6.tar.gz /usr/local/src/ 
tar zxvf beanstalkd-1.4.6.tar.gz 
cd  beanstalkd-1.4.6 
./configure --prefix=/usr/local/beanstalkd 
make 
make install 
./beanstalkd -d -l 127.0.0.1 -p 11300 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;liunx-包安装&quot;&gt;Liunx-包安装&lt;/h6&gt;

&lt;p&gt;1.centos&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install beanstalkd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2.ubuntu&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install beanstalkd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;windows&quot;&gt;Windows&lt;/h6&gt;

&lt;p&gt;Windows果然是后娘养的，暂时没有官方提供的安装包只有国人修改的客户端，大家有兴趣的可以看看：&lt;a href=&quot;https://git.oschina.net/lomox/beanstalkd-win&quot;&gt;点击我&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;1.首先cd到Beanstalkd目录(配好环境变量的哥子除外)
2.后台启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beanstalkd -l 地址 -p 端口号 -z 最大的任务大小(byte) -c &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
-b DIR   wal directory

-f MS    fsync at most once every MS milliseconds (use -f0 for “always fsync”)
-F       never fsync (default)
-l ADDR  listen on address (default is 0.0.0.0)
-p PORT  listen on port (default is 11300)
-u USER  become user and group
-z BYTES set the maximum job size in bytes (default is 65535)
-s BYTES set the size of each wal file (default is 10485760)
(will be rounded up to a multiple of 512 bytes)
-c       compact the binlog (default)
-n       do not compact the binlog
-v       show version information
-V       increase verbosity
-h       show this help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;demo点击我&quot;&gt;Demo（&lt;a href=&quot;https://github.com/izhangmai/queue/blob/master/beanstalkd/index.php&quot;&gt;点击我&lt;/a&gt;）&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
    // 引入BeanStalk客户端类
    require('BeanStalk.class.php');

    $beanstalk = BeanStalk::open(array(
        'servers'       =&amp;gt; array( '127.0.0.1:11300' ),
        'select'        =&amp;gt; 'random peek'
    ));
    
    $beanstalk-&amp;gt;use_tube('foo');
    
    $beanstalk-&amp;gt;put(0, 0, 120, 'say hello world');
     $beanstalk-&amp;gt;watch('foo'); 
    $job = $beanstalk-&amp;gt;reserve_with_timeout(); 
    echo $job-&amp;gt;get();
    Beanstalk::delete($job);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/11/Queue-%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8Beanstalked/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/01/11/Queue-%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8Beanstalked/</guid>
        
        <category>Queue</category>
        
        <category>Beanstalked</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Swift 3更新了啥?[译]</title>
        <description>&lt;h1 id=&quot;swift-3更新了啥译&quot;&gt;Swift 3更新了啥?[译]&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/135655/whats-new-swift-3&quot; target=&quot;_blank&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swift 3在2016年10月13日正式发布，并且为Swift开发者带来了大量的代码更新。&lt;/p&gt;

&lt;p&gt;如果你还没有紧密的关注这个项目&lt;a href=&quot;https://github.com/apple/swift-evolution&quot; target=&quot;_blank&quot;&gt;Swift Evolution&lt;/a&gt;(来哥注:这个是Swift的开源项目仓库，里面有所有的Swift更新动态)，那么你很可能想知道Swift3中有哪些变化？这些变化是否影响你的编码方式？以及你是否应该考虑开始使用Swift 3进行开发了。这篇文章会告诉你所有答案！:]&lt;/p&gt;

&lt;h2 id=&quot;开篇&quot;&gt;开篇&lt;/h2&gt;

&lt;p&gt;Xcode8中已经允许使用Swift 3了。&lt;/p&gt;

&lt;p&gt;为了允许开发者迁移到Swift 3版本，苹果已经在Xcode8中包含了一个Swift 2.3的升级包。对开发者来说，Swift 2.3和Swift 2.2几乎是一样的，但是对于编译的SDK和Xcode来说却是有差异的。即使你现在还没有将代码迁移至Swift 3，目前你仍然可以提交使用Swift 2.3开发的app到App Store。&lt;/p&gt;

&lt;p&gt;当然我推荐你可以使用Playground或者直接在你的项目中使用我们接下来将要讨论到的Swift 3的新特性，你会发现Swift 3的改变真的还蛮大的！&lt;/p&gt;

&lt;h2 id=&quot;迁移至swift-3&quot;&gt;迁移至Swift 3&lt;/h2&gt;

&lt;p&gt;在转换代码到Swift 3版本的时候，你会发现几乎每一个文件都需要进行更改！这个最主要的原因是所有的Cocoa API的命名都进行了修改！或者更准确的来说，API还是和原来一样的，只不过API的命名分成了两部分，一部分是适应Objective-C另一部分是适应Swift的。这么做也是为了Swift 3在将来更加自然的书写。&lt;/p&gt;

&lt;p&gt;苹果在Xcode中内置了一个迁移助手，它可以一步到位并且很完美地将大部分代码升级至Swift 3。有些部分代码可能转换失败，那么你可以能需要手动处理一下。&lt;/p&gt;

&lt;p&gt;通过转换助手你可以瞬间将代码转换成Swift 2.3或者Swift 3。如果你想恢复已经转换的代码，你可以这样做&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Convert&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;To Current Swfit Syntax...&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;编译器现在也和迁移助手一样只能了，比如你在方法调用中使用了来的API接口，编译器会提供一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Fix-it&lt;/code&gt;的选项来帮助你修改到最新的API上。&lt;/p&gt;

&lt;h2 id=&quot;swift更新中已经实施了的提议&quot;&gt;Swift更新中已经实施了的提议&lt;/h2&gt;

&lt;p&gt;在Swift开源以来，社区成员提交超过100个的建议来推动Swift的发展。其中大部分的提议在经过讨论和修正之后都被Swift接受了。而那些被拒绝的提议也在不断的讨论中产生更多的新想法。当然，所有的讨论以及提议最终由Swift的核心团队来执行。&lt;/p&gt;

&lt;p&gt;Swift在开源以来经过短短的时间就在Github斩获了超过3万个star，为此官方团队和第三方社区都极受鼓舞。有些提案每隔几周就被提交，即使苹果的工程师们已经在修仪进程中了，可见开发者对于加入Swift的革新事业中是多么的热情澎湃。&lt;/p&gt;

&lt;p&gt;在下面的几个章节中，你会看到很多连接，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;[SE-0001]&lt;/code&gt;。这些都是Swift的提议编码号。通过这些提议编号的连接地址你可以探索到所有Swift更新中变化的细节。另外你也可以查看&lt;a href=&quot;https://apple.github.io/swift-evolution/&quot; target=&quot;_blank&quot;&gt;status of all Swift Evolution proposals&lt;/a&gt;，看看哪些提议已经被实施了。这篇文章中的代码示例主要来自 &lt;a href=&quot;https://www.hackingwithswift.com/swift3&quot; target=&quot;_blank&quot;&gt;common changes you’ll notice in Swift 3&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;api的变更&quot;&gt;API的变更&lt;/h2&gt;

&lt;p&gt; 在Swift 3中最大的更新便是对所有涉及到标准库的的API都采用了更加一致的命名规范。&lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot; target=&quot;_blank&quot;&gt;API Design Guidleines&lt;/a&gt;含括了构建Swift 3 API的一般规则。这个规则最高的优先权重是放在可读性和可访问性上的。官方团队也指定了一般性的准则“好的API设计总是优先考虑调用端”。他们力争做到更加清晰的使用，没有混乱的调用！&lt;/p&gt;

&lt;p&gt;下面的更新很有可能对你有用！&lt;/p&gt;

&lt;h3 id=&quot;参数符号一致性&quot;&gt;参数符号一致性&lt;/h3&gt;

&lt;p&gt;我们直接从日常使用Swift中的一些对照的例子开始把。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/What’s New in Swift 3/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;函数或者方法的第一个形参总是要求有一个参数符号！在这之前调用函数或者方法是要求你忽略掉第一个参数符号的[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md&quot; target=&quot;_blank&quot;&gt;SE-0046&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2, followed by new way, Swift 3&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;NSJSONSerialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JSONObjectWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;JSONSerialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;addQuadCurveToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controlPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addQuadCurve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controlPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;NSFileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;URLsForDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DocumentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDomains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UserDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;panelView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerXAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constraintEqualToAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerXAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;panelView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerXAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerXAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;pngImageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeToURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pngImageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;numberOfSectionsInTableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;SCNAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SCNVector3Make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;SCNAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNVector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要注意的是怎么在方法定义中的外部名称中准确地使用介词比如“of”，“to”，“with”，“in”，这将直接影响到代码的可读性。&lt;/p&gt;

&lt;p&gt;如果你的方法调用可读性强，那么你也可以不用使用参数符号，但是你要在第一个参数使用下划线。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didMoveToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SKView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在很多编程语言中，方法可以共享一个基本名称，然后通过不同的参数来区分不同的方法，Swift也是类似的，在API命名更新成更为直接的方式之后，你会更加经常地遇到方法的重载。下面是&lt;code class=&quot;highlighter-rouge&quot;&gt;index()&lt;/code&gt;的两种形式。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Anna&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Barbara&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;annaIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Anna&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Barbara's position: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annaIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参数命名方法的更改使得Swift命名更加直接并且更加容易学习。&lt;/p&gt;

&lt;h3 id=&quot;忽略不必要的方法命名单词&quot;&gt;忽略不必要的方法命名单词&lt;/h3&gt;

&lt;p&gt;在之前苹果的库的迭代中，方法总是定义了这个方法期望返回的值的类型。但是因为Swift编译器拥有类型检查之后，这种命名方式就变得不那么必要了。Swift团队花了很多精力去将方法命名中冗余的字段删除，只保留重要信息因此大部分重复的命名单词被删除。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/What’s New in Swift 3/pic2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;API从Objective-C转换到原生Swift已经变得越来越智能了[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&quot; target=&quot;_blank&quot;&gt;SE-0005&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2, followed by new way, Swift 3&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;helloString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringByAppendingString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helloString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blueColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colorWithAlphaComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;withAlphaComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;NSBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maxElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Koala&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Koala&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;WKInterfaceDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;WKInterfaceDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;playHaptic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;更加现代的gcd以及core-graphics&quot;&gt;更加现代的GCD以及Core Graphics&lt;/h3&gt;

&lt;p&gt;谈及旧的API的改造，GCD和Core Graphics的呼声是最高的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/What’s New in Swift 3/pic3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GCD是用于处理多线程任务例如长计算以及服务通信，因为GCD的底层是使用C语言编写，所以GCD的API有这浓浓的C style风格，不过在Swift 3中已经被重新改装了 [&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&quot; target=&quot;_blank&quot;&gt;SE-0088&lt;/a&gt;]。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.myqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// new way, Swift 3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.test.myqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样地，Core Graphics底层也使用了C编写，API也同样做了原生Swift的改造。[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md&quot; target=&quot;_blank&quot;&gt;SE-0044&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strokeWidth&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextSetStrokeColorWithColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextSetLineWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextAddArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextDrawPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCGPathStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// new way, Swift 3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strokeWidth&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setStrokeColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setLineWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFillColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;clockwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;枚举取消大写&quot;&gt;枚举取消大写&lt;/h3&gt;

&lt;p&gt;另一个在你平常Swift编码中相反的例子便是：在枚举类的case中使用小驼峰命名代替大驼峰命名。这会使得枚举的case和一般的成员属性更加一致。[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&quot; target=&quot;_blank&quot;&gt;SE-0006&lt;/a&gt;]:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2, followed by new way, Swift 3&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;UIStatusBarStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LightContent&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIStatusBarStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightContent&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;SKLabelVerticalAlignmentMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Center&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;SKLabelVerticalAlignmentMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;方法的返回和直接修改&quot;&gt;方法的返回和直接修改&lt;/h3&gt;

&lt;p&gt;这个也是标准库将要变得一致性的命名方式，同一个方法会根据后缀的不同会产生不同的影响，其规则如下：如果一个方法名有一个后缀“-ed”或者“-ing”，那么这个方法的命名方式是名词式的，那么这个方法会返回值(拷贝)，如果一个方法没有上述的后缀，那么这个方法极有可能是一个动词式的方法，调用这个方法会直接操作并影响内存。这个也就是很出名的&lt;code class=&quot;highlighter-rouge&quot;&gt;modifying in place&lt;/code&gt;。下面有几对标准库中的方法是符合 名词式/动词式 命名规范的。尤其是&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;相关的方法有这种趋势。比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate()/enumerated()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse()/reversed()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()/sorted()&lt;/code&gt;,一般的规则就是 一个动词式方法如果加上”-ed”的后缀，那么这个方法编程一个名词式方法，这个方法会有返回一个数组的拷贝。&lt;/p&gt;

&lt;p&gt;这些方法的代码片段的讨论在[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&quot; target=&quot;_blank&quot;&gt;SE-0006&lt;/a&gt;]:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// variable, not constant, so you can modify it&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// modified in place, value now [2, 10, 21]&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copied into a dictionarry&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. 2 \n 2. 10 \n 3. 21&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;函数类型&quot;&gt;函数类型&lt;/h3&gt;

&lt;p&gt;函数的定义和调用总是需要用圆括号来包住参数：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是当你使用函数作为参数的时候，圆括号可以省略：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// old way, Swift 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可能发现上面那样定义的函数是相当难阅读的。当在参数结束以及要返回一个函数类型的时候，在Swift 3中正确的做法是：[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&quot; target=&quot;_blank&quot;&gt;SE-0066&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new way, Swift 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在如果返回类型是一个函数的时候，参数必须要使用圆括号包围，这样代码就会变得更加清新，函数类型的返回也更加容易辨认，下面是更多的对方例子：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// old way, Swift 2&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// new way, Swift 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;附加的api&quot;&gt;附加的API&lt;/h2&gt;

&lt;p&gt;Swift 3中除了将所有API进行了现代化的改造之外，也额外添加了更多有用的附加API。&lt;/p&gt;

&lt;h3 id=&quot;访问包含类型&quot;&gt;访问包含类型&lt;/h3&gt;

&lt;p&gt;当你定义一个静态变量或者方法的时候，你总是需要用下面的方式来访问：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CustomStruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要调用一个方法的静态变量或者和静态方法，你需要使用这个静态遍历或静态方法定义所在的类型，然后使用类型的点方法来调用。现在你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt;直接从一个对象实例直接获取到这个对象的类型。注意&lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;的区别。[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&quot; target=&quot;_blank&quot;&gt;SE-0068&lt;/a&gt;]:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomStruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          
 &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;          
 &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          
 &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in the body of the type          &lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;          
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;          
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customStruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;          
&lt;span class=&quot;n&quot;&gt;customStruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// on an instance of the type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这个特性会在Swift 3.1之后加入，并不适用当前的Xcode 8。&lt;/p&gt;

&lt;h3 id=&quot;内联序列&quot;&gt;内联序列&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence(first:next:)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence(state:next:)&lt;/code&gt;是两个可以返回无穷序列的全局函数。你传入一个初始值或者一个可变的状态然后它会在一个闭包中运行。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// someView, someView.superview, someView.superview.superview, ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;来约束这个序列[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&quot; target=&quot;_blank&quot;&gt;SE-0045&lt;/a&gt;]:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// 0.1, 0.2, 0.4, 0.8, 1.6, 3.2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这个特性会在Swift 3.1之后加入，并不适用当前的Xcode 8。&lt;/p&gt;

&lt;h2 id=&quot;杂项&quot;&gt;杂项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#keyPath()&lt;/code&gt;类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;#selector()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;π现在可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Float.pi&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;CGFloat.pi&lt;/code&gt;来获取，并且编译器大部分时间都能推断类型，如：&lt;code class=&quot;highlighter-rouge&quot;&gt;let circumference = 2 * .pi * radius&lt;/code&gt;[&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&quot; target=&quot;_blank&quot;&gt;SE-0067&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;NS开头的类全部被干掉了，如&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;来代替原来的&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCalendar&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;工具的改进&quot;&gt;工具的改进&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;哈希索引提速3倍&lt;/li&gt;
  &lt;li&gt;堆拷贝提升24倍&lt;/li&gt;
  &lt;li&gt;阿拉巴啦阿拉巴啦 不想翻译……&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;swift的包管理工具&quot;&gt;Swift的包管理工具&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot; target=&quot;_blank&quot;&gt;Swift Package Manager&lt;/a&gt; 定义了一个Swift代码目录的目录结构，可以很方便的分享和导入第三方的库。&lt;/p&gt;

&lt;p&gt;和Cocoapods、Carthage类似的，Swift package manager会自动下载依赖库，通过编译、链接生成库文件或者可直接文件，Swift 3第一次将Swift Package Manager集成进Swift的发布中，目前已经有1000多的第三库支持这个包管理工具了。不过目前Swift Package Manager只支持服务端项目的包管理，还不支持iOS项目。&lt;/p&gt;

&lt;h2 id=&quot;将来计划的特型&quot;&gt;将来计划的特型&lt;/h2&gt;

&lt;p&gt;不想翻译&lt;/p&gt;

&lt;h2 id=&quot;下一步&quot;&gt;下一步&lt;/h2&gt;

&lt;p&gt;不想翻译&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/10/Swift-3%E6%9B%B4%E6%96%B0%E4%BA%86%E5%95%A5-%E8%AF%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/10/Swift-3%E6%9B%B4%E6%96%B0%E4%BA%86%E5%95%A5-%E8%AF%91/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>WWDC2016新技术盘点</title>
        <description>&lt;h2 id=&quot;新的api&quot;&gt;新的API&lt;/h2&gt;

&lt;h3 id=&quot;sfspeechrecognizer框架&quot;&gt;SFSpeechRecognizer框架&lt;/h3&gt;

&lt;p&gt;全新的SFSpeechRecognizer框架的到来彻底改变了在以前我们处理语音识别非常的繁琐甚至很多时候可能需要借助于第三方框架处理的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以实现连续的语音识别&lt;/li&gt;
  &lt;li&gt;可以对语 音文件或者语音流进行识别&lt;/li&gt;
  &lt;li&gt;最佳化自由格式的听写(可理解为多语言支持)和搜索式的字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：读取一段语音文件输出文字内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot;&gt;#import &amp;lt;Speech/Speech.h&amp;gt;
//1.创建本地化标识符
NSLocale *local =[[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;];
//2.创建一个语音识别对象
SFSpeechRecognizer *sf =[[SFSpeechRecognizer alloc] initWithLocale:local];
//3.将bundle 中的资源文件加载出来返回一个url
NSURL *url =[[NSBundle mainBundle] URLForResource:@&quot;掌麦企业文化.mp3&quot; withExtension:nil];
//4.将资源包中获取的url 传递给 request 对象
SFSpeechURLRecognitionRequest *res =[[SFSpeechURLRecognitionRequest alloc] initWithURL:url];
//5.发送一个请求
[sf recognitionTaskWithRequest:res resultHandler:^(SFSpeechRecognitionResult * _Nullable result, NSError * _Nullable error) {
        if (error!=nil) {
            NSLog(@&quot;语音识别解析失败,%@&quot;,error);
        }else{
            //解析正确
            NSLog(@“语音内容：@&quot;,result.bestTranscription.formattedString);
    }
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sirikit&quot;&gt;SiriKit&lt;/h3&gt;

&lt;p&gt;在iOS10之后，苹果希望Siri能够给用户带来更多的功能体验，基于这个出发点，新增了SiriKit框架。Siri通过语言处理系统识别与用户的对话，解析并生成用于描述对话的意图（Intent），然后通过Siri框架把该Intent分发给相应的应用程序进而获取内容或执行操作。（图片来源苹果官方文档 SiriKit Programming Guide）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/WWDC2016/SiriKit.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过官方文档可以了解到SiriKit支持以下六类服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语音和视频通话&lt;/li&gt;
  &lt;li&gt;发送消息&lt;/li&gt;
  &lt;li&gt;收款或者付款&lt;/li&gt;
  &lt;li&gt;图片搜索&lt;/li&gt;
  &lt;li&gt;管理锻炼&lt;/li&gt;
  &lt;li&gt;行程预约&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;通知&quot;&gt;通知&lt;/h3&gt;

&lt;p&gt;新的通知框架新增了以下功能&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整合统一了本地通知和远程通知&lt;/li&gt;
  &lt;li&gt;可以在通知中加入多媒体内容&lt;/li&gt;
  &lt;li&gt;可以获取App中的应用清单，可以触发通知时间，能更新这些通知，删除旧通知&lt;/li&gt;
  &lt;li&gt;可以通过代码获取用户的通知设置情况&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;UserNotifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（iOS10+， watchOS 3.0+，tvOS10.0+）&lt;/p&gt;

&lt;p&gt;支持远程推送和本地通知的接收和发送，可以使用这个框架管理通知的发送基于地理位置和时间。同时应用程序扩展也可以使用该框架进行通知管理&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;UserNotificationsUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（iOS10+）&lt;/p&gt;

&lt;p&gt;定义展现在用户设备上的通知效果，前提是使用该框架定义一个程序扩展来接收并发送通知。&lt;/p&gt;

&lt;h3 id=&quot;foundation框架&quot;&gt;Foundation框架&lt;/h3&gt;

&lt;p&gt;新增NSISO8601DateFormatter类
新增NSDateInterval类型&lt;/p&gt;

&lt;h3 id=&quot;uitableview-和-uicollectionview-预加载&quot;&gt;UITableView 和 UICollectionView 预加载&lt;/h3&gt;

&lt;p&gt;众所周知，TableView和CollectionView的顺滑与否能够很大程度上影响用户的使用体验。这次Apple对这两个View又进行了一次优化。
在UITableView中新增了UITableViewDataSourcePrefetching协议并提供了下列方法（Swift）&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//此方法在TableViewCell进入屏幕前执行，完成网络请求或者复杂任务处理等耗时任务&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefetchRowsAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//在用户快速滑动，突然停下，反向滑动时停止预加载&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelPrefetchingForRowsAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在UICollectionView中新增了UICollectionViewDataSourcePrefetching协议并提供了下列方法（Swift）&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//此方法在CollectionViewItem进入屏幕前执行，完成网络请求或者复杂任务处理等耗时任务，&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefetchItemsAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//在用户快速滑动，突然停下，反向滑动时停止预加载&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelPrefetchingForItemsAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gcd在swift30中的彻底改写&quot;&gt;GCD在Swift3.0中的彻底改写&lt;/h3&gt;

&lt;p&gt;GCD（Grand Central Dispatch）是iOS开发中的重要概念，平时开发中大多数多线程都会用到它。此次在Swift3.0的更新中彻底改了GCD的语法，我们将不再会看到类似dispatch_async，dispatch_sync这样的写法了，而是引入DispatchQueue这个类。
例如:在全局线程中定义一个常量，在主线程中打印出来&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swift3.0 GCD&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;￼除了使用DispatchQueue之外也可以自定义DispatchWorkItem。DispatchWorkItem 定义了一个操作的内部代码，以及优先级，特性等等。 它可以直接在任何队列中执行：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swift.queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;workItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DispatchWorkItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInitiated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//执行操作  &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;￼对dispatch_time_t也进行了改进，语法使用起来更加简单。DispatchTime.now() 是当前事前， 然后加上 .seconds(60) 代表 60秒。￼&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DispatchTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;uiviewpropertyanimator&quot;&gt;UIViewPropertyAnimator&lt;/h3&gt;

&lt;p&gt;新的 UIViewPropertyAnimator 类可以更好地使用 UIView.animatedWithDuration API，借此可以实现很多功能，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;中途中断动画，暂停，停止，恢复，逆转，控制进度&lt;/li&gt;
  &lt;li&gt;动画开始后改变值&lt;/li&gt;
  &lt;li&gt;改变 percentComplete 属性让动画更具交互性&lt;/li&gt;
  &lt;li&gt;或者甚至可以把 percentComplete 和 UIGestureRecognizer 结合在一起使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uitabbar&quot;&gt;UITabBar&lt;/h3&gt;

&lt;p&gt;能够控制一个 tab bar item 的样式，比如背景颜色和文字属性。&lt;/p&gt;

&lt;h3 id=&quot;messages-api&quot;&gt;Messages API&lt;/h3&gt;

&lt;p&gt;新的框架，用于创建基于 iMessage 的新应用
能够创建 iMessage 的表情包&lt;/p&gt;

&lt;h2 id=&quot;xcode-里的新工具&quot;&gt;Xcode 里的新工具&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新的可视化调试工具（Visual Debugging Tools），特别是内存和线程工具&lt;/li&gt;
  &lt;li&gt;新的代码签名机制&lt;/li&gt;
  &lt;li&gt;Xcode 扩展&lt;/li&gt;
  &lt;li&gt;在 Xcode 8 里允许你选择使用 Swift 2.3 还是 Swift 3.0&lt;/li&gt;
  &lt;li&gt;图片名字自动补全，代码中可以对颜色和图片文字化&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/09/WWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/09/WWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>【Docker】安装并运行nginx</title>
        <description>
</description>
        <pubDate>Sat, 07 Jan 2017 00:30:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/07/Docker-%E5%AE%89%E8%A3%85%E5%B9%B6%E8%BF%90%E8%A1%8Cnginx/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/07/Docker-%E5%AE%89%E8%A3%85%E5%B9%B6%E8%BF%90%E8%A1%8Cnginx/</guid>
        
        <category>教程</category>
        
        <category>Docker</category>
        
        <category>nginx</category>
        
        
      </item>
    
      <item>
        <title>git常用功能介绍</title>
        <description>&lt;h1 id=&quot;git常用功能介绍&quot;&gt;git常用功能介绍&lt;/h1&gt;

&lt;h2 id=&quot;1-搭建测试环境&quot;&gt;1 搭建测试环境&lt;/h2&gt;

&lt;p&gt;开源中国(https://git.oschina.net/)提供了一个免费的git server服务器，可以到那里注册账号并托管自己的项目，同时也是学习git很理想的一个环境。&lt;/p&gt;

&lt;h2 id=&quot;2-代码下载同步提交&quot;&gt;2 代码下载/同步/提交&lt;/h2&gt;

&lt;p&gt;下载：git clone https://git.oschina.net/brc/LfListView.git
同步：git pull
提交：git add –all;   git commit -m “xxx”;  git push;&lt;/p&gt;

&lt;h2 id=&quot;3-基本概念与文件目录结构&quot;&gt;3 基本概念与文件目录结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Github Pages notes/git_common.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test/.git&lt;/li&gt;
  &lt;li&gt;test/xxx&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-其他常用命令&quot;&gt;4 其他常用命令&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git reset&lt;/li&gt;
  &lt;li&gt;git status&lt;/li&gt;
  &lt;li&gt;git diff&lt;/li&gt;
  &lt;li&gt;git log&lt;/li&gt;
  &lt;li&gt;gitk xxx&lt;/li&gt;
  &lt;li&gt;git blame&lt;/li&gt;
  &lt;li&gt;git branch&lt;/li&gt;
  &lt;li&gt;git checkout&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-git--svn的区别&quot;&gt;5 Git &amp;amp; Svn的区别&lt;/h2&gt;

&lt;p&gt;http://www.cnblogs.com/somethingWithiOS/p/5636356.html&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 03:35:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/06/git%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/06/git%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</guid>
        
        <category>版本管理</category>
        
        
      </item>
    
      <item>
        <title>Github Pages notes</title>
        <description>&lt;h1 id=&quot;github-pages-notes&quot;&gt;Github Pages notes&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Github是目前(2016年12月30日)世界上最大的开源项目托管中心，在这里能够了解到最新的开源技术、能够认识最顶尖的开发者；对于一个技术爱好者以及开发者而言，这个社区是一个结合你的兴趣以及提升能力最佳的地方！&lt;/p&gt;

&lt;p&gt;整个互联网世界的发展离不开开源力量的贡献，互联网的发展带给我们的社会以及文明的飞速发展，使得每一个人都获益良多！所以我们选择在这个开源世界的中心学习并且回馈社会！&lt;/p&gt;

&lt;p&gt;当前的这个博客基于&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;Github Pages&lt;/a&gt;+&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;搭建而成！下面是这个博客系统基本的用法说明。&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot;&gt;Git技术&lt;/a&gt;、&lt;a href=&quot;https://help.github.com/&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;、仓库、以及团队协作方面的知识本文不会赘述，请自行查阅相关的资料。&lt;/p&gt;

&lt;p&gt;Github Pages可以理解为Github上一个仓库的说明文档，只要这个仓库中符合特定条件：如仓库根目录下有&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;，那么Github会为这个仓库自动生成Github Pages页面，其域名是&lt;code class=&quot;highlighter-rouge&quot;&gt;https://[用户名].github.io/[仓库命]&lt;/code&gt;，如当前博客的仓库名是&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai.github.io&lt;/code&gt;，当前注册用户名为&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai&lt;/code&gt;，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Github Pages notes/pic1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并且&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai.github.io&lt;/code&gt;仓库的跟目录下有&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;文件。那么Github会自动为&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai.github.io&lt;/code&gt;这个项目生成Github Pages的页面，其链接地址为：&lt;code class=&quot;highlighter-rouge&quot;&gt;https://izhangmai.github.io/izhangmai.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里Github有一个特殊的Github Pages生成规则，即是当仓库名称为&lt;code class=&quot;highlighter-rouge&quot;&gt;[用户名].github.io&lt;/code&gt;命名的，会自动以&lt;code class=&quot;highlighter-rouge&quot;&gt;https://[用户名].github.io&lt;/code&gt;为Github Pages的链接地址。所以最终&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai(当前登录用户名)&lt;/code&gt;下的一个仓库&lt;code class=&quot;highlighter-rouge&quot;&gt;izhangmai.github.io&lt;/code&gt;的Github Pages的地址为：&lt;code class=&quot;highlighter-rouge&quot;&gt;https://izhangmai.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当前Github Pages已经默认是Enforce Https通信协议了。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;是一个博客构建工具，Github已经自带这个构建工具了，所以你不需要怎么特殊处理，只要你的仓库说明符合Jekyll的配置以及语法要求，Github会自动使用Jekyll来构建你仓库的Github Pages。&lt;/p&gt;

&lt;p&gt;当然你也不希望发布出来的文章充满了排版bug，所以你可以在你自己的计算机安装Jekyll来对你将要发布的文章进行测试和预览，具体的方法请参阅Jekyll使用手册。&lt;/p&gt;

&lt;h2 id=&quot;其他说明&quot;&gt;其他说明&lt;/h2&gt;

&lt;p&gt;当前的博客系统得到完整&lt;a href=&quot;https://www.appinn.com/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown&lt;/a&gt;语法支持，所以建议你使用Markdown进行博客书写！&lt;/p&gt;

&lt;p&gt;每一篇文章就写成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.markdown&lt;/code&gt;文件，&lt;strong&gt;该文件的命名有一定要求，例如当前文章的文件名是：&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-12-30-Github Pages notes.markdown&lt;/code&gt;，其格式要求为：&lt;code class=&quot;highlighter-rouge&quot;&gt;年-月-日-文章标题.markdown&lt;/code&gt; 并且必须放置在&lt;code class=&quot;highlighter-rouge&quot;&gt;/_posts&lt;/code&gt;下才能正确被解析。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其他资源文件(不支持视频！)的放置位置默认是没有限制的，但是为了项目的整洁，希望将所有资源放置的相应的位置！如图片资源请放置到&lt;code class=&quot;highlighter-rouge&quot;&gt;/img&lt;/code&gt;目录下！&lt;/p&gt;

&lt;p&gt;代码高亮使用&lt;a href=&quot;https://prismjs.com/&quot; target=&quot;_blank&quot;&gt;prism&lt;/a&gt;，示例如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;  
int main()  {  
    NSLog(@&quot;Hello World.&quot;);  
    return 0;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一篇文章都有头部&lt;code class=&quot;highlighter-rouge&quot;&gt;元数据&lt;/code&gt;，其格式和说明如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;layout:     布局样式，技术文章的话默认是post
title:      &quot;文章标题，和文件名无关&quot;
subtitle:   &quot;文章副标题&quot;
date:       日期，格式需严格要求
author:     &quot;作者&quot;
header-img: &quot;当前文章的顶部封面资源&quot;
tags: 标签
    - 教程
    - 测试tags
    
更多详情请参阅当前文章的头部元数据   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 29 Dec 2016 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/12/29/Github-Pages-notes/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/29/Github-Pages-notes/</guid>
        
        <category>教程</category>
        
        <category>说明</category>
        
        
      </item>
    
  </channel>
</rss>
