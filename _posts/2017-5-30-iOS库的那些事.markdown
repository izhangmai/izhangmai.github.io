---
layout:     post
title:      "iOS库的那些事"
subtitle:   "库的封装与使用"
date:       2017-5-30 12:00:00
author:     "戴伟来，李清发"
header-img: "img/post/code life/2017-5-30-bg.jpg"
tags:
    - 技术
---

# iOS库的那些事

## 前言

1、减少编译时间

2、模块封装，项目结构优化

3、保护源码

4、提供轮子

5、……

所以我们需要学习库的使用和封装的技术！！



**iOS开发中库分两种：**

> 静态库：以`.a` 和 `.framework`为文件后缀名。
> 动态库：以`.tbd`(之前叫`.dylib`) 和 `.framework` 为文件后缀名。



**静态库与动态库的区别**

> 静态库：链接时会被完整的复制到可执行文件中，被多次使用就有多份拷贝。
> 动态库：链接时不复制，程序运行时由系统动态加载到内存，系统只加载一次，多个程序共用（如系统的`UIKit.framework`等），节省内存。
>
> 但是苹果不让使用自己的动态库，否则审核就无法通过。



**关于编译**

静态库就是在目标程序编译的时候已经存在了编译好了的二进制代码，所以说目标程序编译的时候不需要对这段代码进行改变，而且还减少了编译时间。
动态库就是在目标程序编译的时候不去链接，而是创建了引用，在运行的时候，进行对动态库的链接和编译。



**优缺点**

静态库的好处很明显，编译完成之后，库文件实际上就没有作用了。目标程序没有外部依赖，直接就可以运行。当然其缺点也很明显，就是会使用目标程序的体积增大。

动态库的优点，不需要拷贝到目标程序中，不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，编译时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码，这样就可以实现动态更新。动态库带来的问题主要是，动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行。

## 使用框架

使用包依赖管理工具是最简单粗暴的方式 

如掌麦的iOS项目就是用了[CocoaPods](http://cocoapods.org)

当然还是[Carthage](https://github.com/Carthage/Carthage)、[Swift Package Manager](https://swift.org/package-manager/)。

由于此文章不是工具使用教程，这里不再赘述上述工具。



我们也会遇到手动使用框架的情况，.a和framework最为常见，这些都是静态库；

使用流程一般是：

1、拖入项目

2、buildsetting的library search paths 正确设置即可



如果使用的框架进行了category的操作则需要在other link flag 加上-Objc

就酱紫！

## 制作框架

一下步骤转载自http://www.jianshu.com/p/90f5ec723175



### .a静态库制作

1、先创建一个新的Xcode工程Test，需要选择下面这个模板：

[![111608265-f8f309461eadf0fc](http://jbcdn2.b0.upaiyun.com/2016/11/8aa6f5a0650b943eaf2bc70c1206838f.png)](http://jbcdn2.b0.upaiyun.com/2016/11/8aa6f5a0650b943eaf2bc70c1206838f.png)选择模板

创建完成后是这个样子的：

[![121608265-9fbbdb7c25721b33](http://jbcdn2.b0.upaiyun.com/2016/11/02888cb0553c6fb5a0bad0c92b016f9d.png)](http://jbcdn2.b0.upaiyun.com/2016/11/02888cb0553c6fb5a0bad0c92b016f9d.png)创建工程

2、我们把默认生成的Test.h和Test.m删掉，重新创建一个类PrintString，在这个类里面添加一个单纯打印字符串的简单方法:

[![131608265-2a3c78a381b5278c](http://jbcdn2.b0.upaiyun.com/2016/11/0a3c8e121848b91e1324f5fc6680316f.png)](http://jbcdn2.b0.upaiyun.com/2016/11/0a3c8e121848b91e1324f5fc6680316f.png)PrintString.h

[![141608265-47e2d7c130863f6d](http://jbcdn2.b0.upaiyun.com/2016/11/57337d75e1b1f6631b181d3968691aa9.png)](http://jbcdn2.b0.upaiyun.com/2016/11/57337d75e1b1f6631b181d3968691aa9.png)PrintString.m

3、选择添加公开头文件
为了让使用者知道有哪些方法可以用，我们需要公开头文件，这里我们公开PrintString.h：

[![151608265-85e2a208770188e6](http://jbcdn2.b0.upaiyun.com/2016/11/60cb4b31b5250402392b3086d37ae83b.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/60cb4b31b5250402392b3086d37ae83b.gif)选择添加公开头文件

4、修改配置
我们需要把`Build Active Architecture Only`修改为NO，否则生成的静态库就只支持当前选择设备的架构。

[![161608265-b8b14a2b4ef6f78b](http://jbcdn2.b0.upaiyun.com/2016/11/38b1dc445015e7dbcdd71d6d9f40e2db.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/38b1dc445015e7dbcdd71d6d9f40e2db.gif)修改配置

5、然后编译
我们分别选择`Generic iOS Device`和`任意一个模拟器`各编译一次，编译完后，我们会看到工程中Products文件夹下的libTest.a由红色变成了黑色，然后`show in finder`，看看生成的文件：

[![171608265-1c79cd8e8a108af4](http://jbcdn2.b0.upaiyun.com/2016/11/e34958602bd231e167e4c686a1f26d12.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/e34958602bd231e167e4c686a1f26d12.gif)Untitled.gif

我们看到它为真机和模拟器都生成了.a静态库。里面都包含我们选择公开的头文件。

我们来看看静态库支持的框架：命令为`lipo -info 静态库名字`

[![181608265-12282289b9b59f2b](http://jbcdn2.b0.upaiyun.com/2016/11/c2589262d8c92cc99bc271187eb5e6fd.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/c2589262d8c92cc99bc271187eb5e6fd.gif)查看静态库支持的框架

我们看到，`Debug-iphoneos`里面的静态库支持的架构有`armv7`和`arm64`所以它只能用于真机，在模拟器上会报错。`Debug-iphonesimulator`里面的静态库支持的架构有`i386`和`x86_64`，所以它只能用于模拟器，在真机上会报错。

如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。命令格式：`lipo -create 第一个.a文件的绝对路径 第二个.a文件的绝对路径 -output 最终的.a文件路径`:

[![191608265-c4472265e6c2be4b](http://jbcdn2.b0.upaiyun.com/2016/11/2795e14248b73715d62bace9a665d2b3.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/2795e14248b73715d62bace9a665d2b3.gif)生成通用静态库

我们看到生成了一个新的`libTest.a`文件。这个静态库就支持所有模拟器和所有真机了。然后我们创建一个文件夹，把.a和头文件都放进去，我们最终需要使用的就是这个文件夹：

[![201608265-8497f7c22f2a3729](http://jbcdn2.b0.upaiyun.com/2016/11/7f2ba27b652fafce40aed049ce1bc901.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/7f2ba27b652fafce40aed049ce1bc901.gif)新建文件夹

注意：为了开发方便，我们可以使用生成的通用静态库，但是最终上线的使用我们可以只导入真机的，这样工程的体积也会小一些。

##### 使用生成的.a静态库

新建一个工程，将上面的通用静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：

[![211608265-3b374fe4aeb0712a](http://jbcdn2.b0.upaiyun.com/2016/11/ecc4ac31bf456c36beccfcf136b5e090.png)](http://jbcdn2.b0.upaiyun.com/2016/11/ecc4ac31bf456c36beccfcf136b5e090.png)Paste_Image.png



### .frameworke静态库的制作

1、先创建一个新的Xcode工程LibTest，需要选择下面这个模板：

[![221608265-ecfa937ad49c0767](http://jbcdn2.b0.upaiyun.com/2016/11/40571bf9ba8580f75140d41a86589978.png)](http://jbcdn2.b0.upaiyun.com/2016/11/40571bf9ba8580f75140d41a86589978.png)选择模板

创建完成后是这个样子的：

[![231608265-18f4b924be05fa55](http://jbcdn2.b0.upaiyun.com/2016/11/9259b0a7a57f449b0da4112636a27c77.png)](http://jbcdn2.b0.upaiyun.com/2016/11/9259b0a7a57f449b0da4112636a27c77.png)创建完成

创建完成后我们可以看到，工程本身自带一个`LibTest.h`文件和一个`Info.plist`文件。

2、我们创建一个类`PrintString`，添加一个单纯打印字符串的简单方法:

[![241608265-c3ea26c5d04b8481](http://jbcdn2.b0.upaiyun.com/2016/11/7560efebea4de981f630f53e0e3c593b.png)](http://jbcdn2.b0.upaiyun.com/2016/11/7560efebea4de981f630f53e0e3c593b.png)PrintString.h

[![251608265-633ec0acf041c1d7](http://jbcdn2.b0.upaiyun.com/2016/11/cf9c13d17d71e14ed9b713b332f90f03.png)](http://jbcdn2.b0.upaiyun.com/2016/11/cf9c13d17d71e14ed9b713b332f90f03.png)PrintString

3、选择添加公开头文件
为了让使用者知道有哪些方法可以用，我们需要公开头文件，我们需要在 并且将`Target->Build Phases->Headers`中的`Projec`t中要暴露的头文件拖拽到`Pulic`里面，这里我们公开`PrintString.h`：

[![261608265-9065d3303dfd7fba](http://jbcdn2.b0.upaiyun.com/2016/11/e02d3dbfb98a4e53a65a28a73bae64a2.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/e02d3dbfb98a4e53a65a28a73bae64a2.gif)选择添加公开头文件

注意：暴露出来的头文件中import的其他类也得添加到public中暴露出来。如果不想将import的类暴露出来，那么在头文件中用@class 然后在对应的.m文件中再import。

4、设置支持所有架构（和.a制作一样）
5、修改生成的`Mach-O`格式，因为动态库也可以是以framework形式存在，所以需要设置，否则默认打出来的是动态库。将`target->BuildSetting->Mach-o Type` 设为`Static Library`（默认为`Dynamic Library`）:

[![271608265-9ac2a72c69317964](http://jbcdn2.b0.upaiyun.com/2016/11/8b5a54f8488227956977ee8a2eec7aa5.png)](http://jbcdn2.b0.upaiyun.com/2016/11/8b5a54f8488227956977ee8a2eec7aa5.png)修改生成的Mach-O格式

6、编译
我们分别选择`Generic iOS Device`和`任意一个模拟器`各编译一次，编译完后，我们会看到工程中Products文件夹下的LibTest.framework由红色变成了黑色，然后`show in finder`，看看生成的文件：

[![281608265-1398e58020675a44](http://jbcdn2.b0.upaiyun.com/2016/11/9ac9e99bf137c436d409bae9410ef584.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/9ac9e99bf137c436d409bae9410ef584.gif)编译

我们看到它为真机和模拟器都生成了LibTest.framework静态库。

我们来查看静态库支持的框架：与上面不同，命令为`lipo -info framework下的二进制文件名字`

[![291608265-71c93893b2b4787e](http://jbcdn2.b0.upaiyun.com/2016/11/35987f34012e6d12e252ea47f61b9926.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/35987f34012e6d12e252ea47f61b9926.gif)查看静态库支持的框架

如果想要让模拟器和真机通用一个静态库，我们可以使用终端命令来实现。合并的命令与上面不同的是：framework静态库合并的不是framework,而是framework下的二进制文件，命令为：
`lipo -create 第一个framework下二进制文件的绝对路径 第二个framework下二进制文件的绝对路径 -output 最终的二进制文件路径`：

[![301608265-2dfc39f53cf5d8b4](http://jbcdn2.b0.upaiyun.com/2016/11/84d0cda594a6c618a134a81f5004a582.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/84d0cda594a6c618a134a81f5004a582.gif)合并二进制文件

然后将任何一个framework中的二进制文件替换成合并后的二进制文件,然后把framework添加到要使用的项目中即可使用。

##### 使用生成的.framework静态库

新建一个工程，将静态库拖进去，导入头文件，就可以使用里面的方法了。经过试验，我们生成的静态库在真机上和模拟器上都能成功打印字符串：

[![311608265-19407ac12a2506a3](http://jbcdn2.b0.upaiyun.com/2016/11/5296b2dd443d0c0a677886c4be9bbb1b.png)](http://jbcdn2.b0.upaiyun.com/2016/11/5296b2dd443d0c0a677886c4be9bbb1b.png)Paste_Image.png

注意：
如果静态库中有category类，则在使用静态库的项目配置中`Other Linker Flags`需要添加参数`-ObjC`或者`-all_load`。
如果创建的framework类中使用了`.tbd`，则需要在实际项目中导入`.tbd`动态库。

##### 运行调试静态库

如果你是开发静态库的人，你会发现上面的方法只是制作静态库，并没有办法运行看效果和调试bug，这时候我们可以这样：
1、新建一个专门用来开发静态库的正常工程Test：

[![321608265-1c5fbe82bb1c897e](http://jbcdn2.b0.upaiyun.com/2016/11/64940afb5bfc9c843d2dea470b0470a4.png)](http://jbcdn2.b0.upaiyun.com/2016/11/64940afb5bfc9c843d2dea470b0470a4.png)新建工程

[![331608265-0e64cd5eb6268d74](http://jbcdn2.b0.upaiyun.com/2016/11/c1ce99aa15fdaf2297146649d8704196.png)](http://jbcdn2.b0.upaiyun.com/2016/11/c1ce99aa15fdaf2297146649d8704196.png)建好的工程

2、添加一个静态库的target

[![341608265-d78a7606a7b2d70b](http://jbcdn2.b0.upaiyun.com/2016/11/cc6ec1edacbe7fd2a7625d408ff1d299.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/cc6ec1edacbe7fd2a7625d408ff1d299.gif)添加一个静态库的target

我们看到它生成了几样东西:

> 一个framework的target：在这里面修改静态库的配置们，例如支持的架构、要暴露的头文件们和Mach-O的配置。
> 一个LibTest文件夹：静态库里面的类们都放在这里面。
> product文件夹下面的LibTest.framework：在这里show in finder找到编译后生成的静态库。

3、开发调试代码

[![351608265-f4ac760cb598db22](http://jbcdn2.b0.upaiyun.com/2016/11/8681b9395cad7d5172766f9a190548b3.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/8681b9395cad7d5172766f9a190548b3.gif)开发调试代码

我们看到程序可以正常运行，并可以在动态库里面蹲点运行。方便我们调试。

4、确保代码没问题后，选择对应的target编译生成。

[![361608265-51d077bb2bd12c60](http://jbcdn2.b0.upaiyun.com/2016/11/15e60615d437927d00a4e14d6eef0b45.gif)](http://jbcdn2.b0.upaiyun.com/2016/11/15e60615d437927d00a4e14d6eef0b45.gif)编译生成

5、后面的过程就与上面一样了。

